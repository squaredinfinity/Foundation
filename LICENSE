Enter file contents here

  public class ObservableCollectionEx2<TItem> : ObservableCollectionEx<TItem>
    {
        public event EventHandler<TItem> AfterItemAdded_TEMP;

        protected override void InsertItem(int index, TItem item)
        {
            base.InsertItem(index, item);

            if (AfterItemAdded_TEMP != null)
                AfterItemAdded_TEMP(this, item);
        }
    }

    public class ObservableExtensionCollection<TOwner> : 
            ObservableCollectionEx<IExtension<TOwner>>, 
            IExtensionCollection<TOwner> 
            where TOwner : IExtensibleObject<TOwner> 
     { 
         readonly TOwner Owner;

         public ObservableExtensionCollection(TOwner owner) 
         { 
             this.Owner = owner; 
         } 
  
         public TExtension GetOrAdd<TExtension>(Func<TExtension> createValue) 
             where TExtension : IExtension<TOwner> 
         { 
             using (CollectionLock.AcquireReadLock()) 
             { 
                 var extension = GetExtensionInternal_NoLock(typeof(TExtension).FullName); 
 
 
                 if (extension != null) 
                     return (TExtension)extension; 
             } 
 
 
             // failed to find extension, create a new value and insert 
             using (CollectionLock.AcquireUpgradeableReadLock()) 
             { 
                 var extension = GetExtensionInternal_NoLock(typeof(TExtension).FullName); 
 
 
                 if (extension != null) 
                    return (TExtension)extension; 
 
 
                 extension = createValue(); 

 
                 Add(extension);
 
 
                 return (TExtension)extension; 
             } 
         }
        
         protected override void InsertItem(int index, IExtension<TOwner> item)
         {
             base.InsertItem(index, item);

             item.Attach(Owner);
         }

         protected override void SetItem(int index, IExtension<TOwner> item)
         {
             base.SetItem(index, item);

             item.Attach(Owner);
         }
 
 
         public object this[Type extensionType] 
         { 
             get 
             { 
                 if (extensionType == null) 
                     throw new ArgumentNullException("extensionType"); 
 
 
                 using (CollectionLock.AcquireReadLock()) 
                 { 
                     return GetExtensionInternal_NoLock(extensionType.FullName); 
                 } 
             } 
         } 
 
 
         public object this[string extensionTypeFullOrPartialName] 
         { 
             get 
             { 
                 using (CollectionLock.AcquireReadLock()) 
                 { 
                     return GetExtensionInternal_NoLock(extensionTypeFullOrPartialName); 
                 } 
             } 
         } 
 
 
         protected virtual IExtension<TOwner> GetExtensionInternal_NoLock(string extensionTypeFullOrPartialName) 
         { 
             //# find by full type name 
             var extension = 
                 (from ex in this 
                  where ex.GetType().FullName == extensionTypeFullOrPartialName 
                  select ex).FirstOrDefault(); 
 
 
             if (extension != null) 
                return extension; 
 
 
             //# find by partial type name 
             extension = 
                 (from ex in this 
                  where ex.GetType().Name == extensionTypeFullOrPartialName 
                  select ex).FirstOrDefault(); 
 
 
             return extension; 
         } 
     } 


    public class PresentationWrapper : NotifyPropertyChangedObject, IExtensibleObject<PresentationWrapper>
    {
        object _wrappedInstance;
        public object WrappedInstance 
        {
            get { return _wrappedInstance; }
            set { TrySetThisPropertyValue(ref _wrappedInstance, value); } 
        }

        public PresentationWrapper(object wrappedInstance)
        {
            _extensions = new ObservableExtensionCollection<PresentationWrapper>(this);
            this.WrappedInstance = wrappedInstance;
        }

        readonly IExtensionCollection<PresentationWrapper> _extensions;
        public IExtensionCollection<PresentationWrapper> Extensions
        {
            get { return _extensions; }
        }
    }

    public class PresentationWrapperCollection : 
        ObservableCollectionEx2<PresentationWrapper>,
        IExtensibleObject<PresentationWrapperCollection>
    {

        public PresentationWrapperCollection()
        {
            _extensions = new ObservableExtensionCollection<PresentationWrapperCollection>(this);
        }
        
        IExtensionCollection<PresentationWrapperCollection> _extensions;
        public IExtensionCollection<PresentationWrapperCollection> Extensions
        {
            get { return _extensions; }
        }
    }

    
    
    public class SingleSelectionExtension : NotifyPropertyChangedObjectExtension<PresentationWrapperCollection>
    {
        public event EventHandler AfterSelectedItemChanged;

        PresentationWrapper _selectedItem;
        public PresentationWrapper SelectedItem 
        {
            get { return _selectedItem; }
            set 
            {
                if(TrySetThisPropertyValue(ref _selectedItem, value))
                {
                    if (AfterSelectedItemChanged != null)
                        AfterSelectedItemChanged(this, EventArgs.Empty);
                }                
            }
        }

        protected override void OnAttached(PresentationWrapperCollection owner)
        {
            base.OnAttached(owner);

            owner.AfterItemAdded_TEMP += owner_AfterItemAdded_TEMP;
            owner.AfterItemRemoved += owner_AfterItemRemoved;
        }

        protected override void OnDetached(PresentationWrapperCollection owner)
        {
            owner.AfterItemAdded_TEMP -= owner_AfterItemAdded_TEMP;

            base.OnDetached(owner);
        }

        void owner_AfterItemAdded_TEMP(object sender, PresentationWrapper e)
        {
            var listItemExtension = e.Extensions.GetOrAdd<ListItemExtension>(() => new ListItemExtension());

            listItemExtension.AfterIsSelectedChanged += listItemExtension_AfterIsSelectedChanged;
        }

        void owner_AfterItemRemoved(object sender, AfterItemRemovedEventArgs<PresentationWrapper> e)
        {
            var listItemExtension = (ListItemExtension)e.RemovedItem.Extensions[typeof(ListItemExtension)];

            listItemExtension.AfterIsSelectedChanged -= listItemExtension_AfterIsSelectedChanged;
        }

        void listItemExtension_AfterIsSelectedChanged(object sender, EventArgs e)
        {
            var li = sender as ListItemExtension;

            if (object.Equals(li.Owner, SelectedItem))
            {
                if (li.IsSelected == false)
                    SelectedItem = null;
            }
            else
            {
                if(SelectedItem != null)
                {
                    ((ListItemExtension)SelectedItem.Extensions[typeof(ListItemExtension)]).IsSelected = false;
                }

                if (li.IsSelected)
                    SelectedItem = li.Owner;
                else
                    SelectedItem = null;
            }
        }
    }
