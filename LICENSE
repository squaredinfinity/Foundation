var bg_a = bg >> 24 & 0xff;
                    var bg_r = bg >> 16 & 0xff;
                    var bg_g = bg >> 8 & 0xff;
                    var bg_b = bg & 0xff;

                    var fg_a = fg >> 24 & 0xff;
                    var fg_r = fg >> 16 & 0xff;
                    var fg_g = fg >> 8 & 0xff;
                    var fg_b = fg & 0xff;

                    var ai = (255 - fg_a) + 1;

                    var r = ((ai * bg_r) >> 8) + fg_r;
                    var g = ((ai * bg_g) >> 8) + fg_g;
                    var b = ((ai * bg_b) >> 8) + fg_b;
                    var a = ((ai * bg_a) >> 8) + fg_a;

                    var argb = a << 24 | r << 16 | g << 8 | b;
                    
                    var ai = (255 - (fg >> 24)) + 1;

                    // remove unwanted channels (AARRGGBB & mask = 00RR00BB)
                    var rb = bg & 0x00FF00FF;
                    // results will be in high order bytes (RRxxBBxx), shift right (00RRxxBB)
                    // mask away insignificant bytes (00RR00BB)
                    var rb_1 = (int)((ai * rb) >> 8) & 0x00FF00FF;
                    
                    // shift A and G bytes right (AARRGGBB >> 8 = 00AARRGG)
                    // remove unwanted channels (00AARRGG & mask = 00AA00GG)
                    var ag = (bg >> 8) & 0x00FF00FF;
                    // results will already be in correct bytes, no need to shift right (AAxxGGxx)
                    // just mask insignificant bytes (xx)
                    var ag_1 = (int)((ai * ag) & 0xFF00FF00);

                    var argb = (rb_1 + ag_1 + fg);
                    
                    
       
            public static class Highlight
    {

        #region Selection Highlight Brush

        public static Brush GetSelectionHighlightBrush(DependencyObject obj)
        {
            return (Brush)obj.GetValue(SelectionHighlightBrushProperty);
        }

        public static void SetSelectionHighlightBrush(DependencyObject obj, Brush value)
        {
            obj.SetValue(SelectionHighlightBrushProperty, value);
        }

        public static readonly DependencyProperty SelectionHighlightBrushProperty =
            DependencyProperty.RegisterAttached(
            "SelectionHighlightBrush",
            typeof(Brush),
            typeof(Highlight),
            new FrameworkPropertyMetadata(null, 
                FrameworkPropertyMetadataOptions.Inherits,
                AfterSelectionHighlightBrushChanged));

        static void AfterSelectionHighlightBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            RaiseAfterSelectionHighlightBrushChanged(d as UIElement, (Brush)e.NewValue);
        }

        #endregion

        #region After Selection Highlight Brush Changed

        public static readonly RoutedEvent AfterSelectionHighlightBrushChangedEvent =
            EventManager.RegisterRoutedEvent(
            "AfterSelectionHighlightBrushChanged",
            RoutingStrategy.Bubble,
            typeof(RoutedEventHandler),
            typeof(Highlight));

        public static void AddAfterSelectionHighlightBrushChangedHandler(DependencyObject d, RoutedEventHandler handler)
        {
            UIElement uie = d as UIElement;
            if (uie != null)
            {
                uie.AddHandler(AfterSelectionHighlightBrushChangedEvent, handler);
            }
        }
        public static void RemoveAfterSelectionHighlightBrushChangedHandler(DependencyObject d, RoutedEventHandler handler)
        {
            UIElement uie = d as UIElement;
            if (uie != null)
            {
                uie.RemoveHandler(AfterSelectionHighlightBrushChangedEvent, handler);
            }
        }

        static void RaiseAfterSelectionHighlightBrushChanged(UIElement uiElement, Brush newSelectionHighlightBrush)
        {
            if (uiElement == null)
                return;

            RoutedEventArgs newEventArgs = new RoutedEventArgs(AfterSelectionHighlightBrushChangedEvent);
            uiElement.RaiseEvent(newEventArgs);
        }

        #endregion


        #region Hover Highlight Brush

        public static Brush GetHoverHighlightBrush(DependencyObject obj)
        {
            return (Brush)obj.GetValue(HoverHighlightBrushProperty);
        }

        public static void SetHoverHighlightBrush(DependencyObject obj, Brush value)
        {
            obj.SetValue(HoverHighlightBrushProperty, value);
        }

        public static readonly DependencyProperty HoverHighlightBrushProperty =
            DependencyProperty.RegisterAttached(
            "HoverHighlightBrush",
            typeof(Brush),
            typeof(Highlight),
            new FrameworkPropertyMetadata(null,
                FrameworkPropertyMetadataOptions.Inherits,
                AfterHoverHighlightBrushChanged));

        static void AfterHoverHighlightBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            RaiseAfterHoverHighlightBrushChanged(d as UIElement, (Brush)e.NewValue);
        }

        #endregion

        #region After HoverHighlight Brush Changed

        public static readonly RoutedEvent AfterHoverHighlightBrushChangedEvent =
            EventManager.RegisterRoutedEvent(
            "AfterHoverHighlightBrushChanged",
            RoutingStrategy.Bubble,
            typeof(RoutedEventHandler),
            typeof(Highlight));

        public static void AddAfterHoverHighlightBrushChangedHandler(DependencyObject d, RoutedEventHandler handler)
        
		{

		// todo: check if this and d have common ancestor?
		// if not, then this may be inside popup?

            UIElement uie = d as UIElement;
            if (uie != null)
            {
                uie.AddHandler(AfterHoverHighlightBrushChangedEvent, handler);
            }
        }
        public static void RemoveAfterHoverHighlightBrushChangedHandler(DependencyObject d, RoutedEventHandler handler)
        {
            UIElement uie = d as UIElement;
            if (uie != null)
            {
                uie.RemoveHandler(AfterHoverHighlightBrushChangedEvent, handler);
            }
        }

        static void RaiseAfterHoverHighlightBrushChanged(UIElement uiElement, Brush newHoverHighlightBrush)
        {
            if (uiElement == null)
                return;

            RoutedEventArgs newEventArgs = new RoutedEventArgs(AfterHoverHighlightBrushChangedEvent);
            uiElement.RaiseEvent(newEventArgs);
        }

        #endregion

        #region Foreground Original Value

        static object GetForegroundOriginalValue(DependencyObject obj)
        {
            return (object)obj.GetValue(ForegroundOriginalValueProperty);
        }

        static void SetForegroundOriginalValue(DependencyObject obj, object value)
        {
            obj.SetValue(ForegroundOriginalValueProperty, value);
        }

        static readonly DependencyProperty ForegroundOriginalValueProperty =
            DependencyProperty.RegisterAttached(
            "ForegroundOriginalValue", 
            typeof(object), 
            typeof(Highlight), 
            new PropertyMetadata(null));

        #endregion

        #region Foreground Modified Value

        static object GetForegroundModifiedValue(DependencyObject obj)
        {
            return (object)obj.GetValue(ForegroundModifiedValueProperty);
        }

        static void SetForegroundModifiedValue(DependencyObject obj, object value)
        {
            obj.SetValue(ForegroundModifiedValueProperty, value);
        }

        static readonly DependencyProperty ForegroundModifiedValueProperty =
            DependencyProperty.RegisterAttached(
            "ForegroundModifiedValue", 
            typeof(object),
            typeof(Highlight), 
            new PropertyMetadata(null));

        #endregion


        #region Text Foreground Responds To Selection (Text Block)

        public static bool GetTextForegroundRespondsToSelection(TextBlock obj)
        {
            return (bool)obj.GetValue(TextForegroundRespondsToSelectionProperty);
        }

        public static void SetTextForegroundRespondsToSelection(TextBlock obj, bool value)
        {
            obj.SetValue(TextForegroundRespondsToSelectionProperty, value);
        }

        public static readonly DependencyProperty TextForegroundRespondsToSelectionProperty =
            DependencyProperty.RegisterAttached(
            "TextForegroundRespondsToSelection",
            typeof(bool),
            typeof(Highlight),
            new PropertyMetadata(false, OnTextForegroundRespondsToSelectionChanged));

        static void OnTextForegroundRespondsToSelectionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var tb = d as TextBlock;
          
            AddAfterHoverHighlightBrushChangedHandler(d, new RoutedEventHandler((_s, _e) =>
                {
                    RefreshForegruond(tb);
                }));

            AddAfterSelectionHighlightBrushChangedHandler(d, new RoutedEventHandler((_s, _e) =>
                {
                    RefreshForegruond(tb);
                }));
        }

        static void RefreshForegruond(TextBlock tb)
        {
            var selectionHighlightBrush = GetSelectionHighlightBrush(tb) as SolidColorBrush;
            var hoverHighlightBrush = GetHoverHighlightBrush(tb) as SolidColorBrush;

            if (selectionHighlightBrush != null || hoverHighlightBrush != null)
            {
                var foreground_originalValue = GetForegroundOriginalValue(tb);
                var foreground_modifiedValue = GetForegroundModifiedValue(tb);

                var highlight_brush = selectionHighlightBrush;

                if (highlight_brush == null)
                    highlight_brush = hoverHighlightBrush;

                if(highlight_brush == null)
                {
                    // todo: restore original foreground

                    SetSelectionHighlightBrush(tb, null);
                    SetHoverHighlightBrush(tb, null);
                    SetForegroundModifiedValue(tb, null);
                    SetForegroundOriginalValue(tb, null);

                    return;
                }

                var highlight_color = highlight_brush.Color;

                var foreground_brush = tb.Foreground as SolidColorBrush;

                if(foreground_originalValue != null)
                {
                    foreground_brush = foreground_originalValue as SolidColorBrush;
                }

                if (foreground_brush == null)
                {
                    // todo: cleanup
                    // todo: restore original foreground
                    return;
                }

                var foreground_color = foreground_brush.Color;

                var highlightScRGB = highlight_color.ToScRGBColor();
                var foregroundScRGB = foreground_color.ToScRGBColor();

                var highlightXYZ = KnownColorSpaces.scRGB.ToXYZColor(highlightScRGB);
                var foregroundXYZ = KnownColorSpaces.scRGB.ToXYZColor(foregroundScRGB);

                var highlightLab = (LabColor) KnownColorSpaces.Lab.FromXYZColor(highlightXYZ);
                var foregroundLab = (LabColor)KnownColorSpaces.Lab.FromXYZColor(foregroundXYZ);

                var newForegroundLab = (LabColor) null;

                if(highlightLab.L > 50 && foregroundLab.L > 50)
                {
                    newForegroundLab = new LabColor(foregroundLab.Alpha, 5, foregroundLab.a, foregroundLab.b);
                }
                else if (highlightLab.L < 50 && foregroundLab.L < 50)
                {
                    newForegroundLab = new LabColor(foregroundLab.Alpha, 95, foregroundLab.a, foregroundLab.b);
                }

                if (newForegroundLab == null)
                    return;

                if (foreground_originalValue == null)
                {
                    var binding = BindingOperations.GetBinding(tb, TextBlock.ForegroundProperty);

                    if (binding != null)
                        SetForegroundOriginalValue(tb, binding);
                    else
                        SetForegroundOriginalValue(tb, tb.Foreground);
                }

                var fgBrush = new SolidColorBrush(newForegroundLab.ToWindowsMediaColor());
                fgBrush.Freeze();

                SetForegroundModifiedValue(tb, fgBrush);

                tb.Foreground = fgBrush;
            }
            else
            {
                var originalValue = GetForegroundOriginalValue(tb);

                if (originalValue == null)
                    return;

                if(originalValue is Binding)
                {
                    BindingOperations.SetBinding(tb, TextBlock.ForegroundProperty, originalValue as Binding);
                }
                else if(originalValue != null && object.Equals(GetForegroundModifiedValue(tb), tb.Foreground))
                {
                    tb.SetValue(TextBlock.ForegroundProperty, originalValue);
                }

                SetForegroundModifiedValue(tb, null);
                SetForegroundOriginalValue(tb, null);
            }
            
        }

        #endregion


    }
    
    
     <Style x:Key="Styles.TextBlock"
           TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource {x:Type TextBlock}}">

        <Setter Property="local:Highlight.TextForegroundRespondsToSelection" Value="true" />
        
        lvi
        
        <Setter Property="local:Highlight.HoverHighlightBrush" Value="{DynamicResource Brushes.ListItem.Hover.Background}" />
        
        <Setter Property="local:Highlight.SelectionHighlightBrush" Value="{DynamicResource Brushes.ListItem.Selected-Inactive.Background}" />
        
        
        <Setter Property="local:Highlight.SelectionHighlightBrush" Value="{DynamicResource Brushes.ListItem.Selected.Background}" />
        

1. blit
2. conversion to writablebitmap
3. perhaps expose pixels array (e.g. via GetPixels())

row size = http://en.wikipedia.org/wiki/BMP_file_format

 var bmp = new WriteableBitmap((int)rd.Width, (int)rd.Height, 96, 96, PixelFormats.Pbgra32, palette: null);

                using (var cx = bmp.GetBitmapContext(ReadWriteMode.ReadWrite))
                {
                    BitmapContext.BlockCopy((int[])rd.Pixels, 0, cx, 0, rd.Pixels.Count);
                }

                bmp.Freeze();


                 // #    Overview
            //      ARGB channels have 1 byte each
            //      RGB channels are pre-multiplied by A, to improve performance of certain operations that use transparency

#if NOT_OPTIMIZED

            //# Below is a non-optimized version of conversion algorithm

            // get Alpha value as a fraction of maximum channel value
            var a_fraction = color.A / 255;

            // construct final 32bit color by moving each channel value to appropriate place
            // BITS:        xxxx|xxxx|xxxx|xxxx
            // CHANNELS:      A | R' | G' | B'      (note: R',G',B' are pre-multiplied channels)
            var color32 =
                (color.A << 24)
                // R,G,B channels must be premultiplied by Alpha
                | (color.R * a_fraction) << 16
                | (color.G * a_fraction) << 8
                | (color.B * a_fraction);
#else
            // NOTE:    This is an optimized version of algorithm above
            //          It avoids floating point arithmetics for faster execution


            // add 1 to original alpha
            // this will make sure that after multiplication by 
            // channel all significant bits are stored in a first byte of the result

            // for example:
            //  A: 255
            //  R: 255
            //      non-optimized way: 
            //          A/255 = 255/255 = 1
            //          R * 1 = 255 | 1111 1111
            //      optimized way (if '1' not added)
            //          255 * 255 = 65025 | 1111 1110 0000 0001 <- notice 8th bit is 0 instead of 1
            //      optimized way ('1' added)
            //          256 * 255 = 65280 | 1111 1111 0000 0000 <- all significant bits have correct values
            //
            //  R: 51
            //      non-optimized way: 
            //          A/255 = 255/255 = 1
            //          R * 1 = 51 | 0011 0011
            //      optimized way (if '1' not added)
            //          255 * 51 = 13005 | 0011 0010 1100 1101 <- <- notice 8th bit is 0 instead of 1
            //      optimized way ('1' added)
            //          256 * 51 = 13056 | 0011 0011 0000 0000 <- all significant bits have correct values
            var a = color.A + 1;

            var color32 =
                (color.A << 24)
                // R,G,B channels must be premultiplied by Alpha
                // shift right by 8 bits to keep only most significant byte of the multiplication result
                | ((color.R * a) >> 8) << 16
                | ((color.G * a) >> 8) << 8
                | ((color.B * a) >> 8);
#endif

public static double NextDouble(double value)
        {

            // Get the long representation of value:
            var longRep = BitConverter.DoubleToInt64Bits(value);

            long nextLong;
            if (longRep >= 0) // number is positive, so increment to go "up"
                nextLong = longRep + 1L;
            else if (longRep == long.MinValue) // number is -0
                nextLong = 1L;
            else  // number is negative, so decrement to go "up"
                nextLong = longRep - 1L;

            return BitConverter.Int64BitsToDouble(nextLong);
        }


                [DllImport("user32.dll", EntryPoint = "GetKeyboardState", SetLastError = true)]
        private static extern bool NativeGetKeyboardState([Out] byte[] keyStates);

        private static bool GetKeyboardState(byte[] keyStates)
        {
            if (keyStates == null)
                throw new ArgumentNullException("keyState");
            if (keyStates.Length != 256)
                throw new ArgumentException("The buffer must be 256 bytes long.", "keyState");
            return NativeGetKeyboardState(keyStates);
        }

        private static byte[] GetKeyboardState()
        {
            byte[] keyStates = new byte[256];
            if (!GetKeyboardState(keyStates))
                throw new Win32Exception(Marshal.GetLastWin32Error());
            return keyStates;
        }

        private static bool AnyKeyPressed()
        {
            byte[] keyState = GetKeyboardState();
            // skip the mouse buttons
            return keyState.Skip(8).Any(state => (state & 0x80) != 0);
        }
