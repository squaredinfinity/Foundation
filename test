

    
    
    
     
    using SquaredInfinity.Foundation.Graphics.Drawing;using SquaredInfinity.Foundation.Extensions;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Windows.Media;using SquaredInfinity.Foundation.Maths.Space2D;using System.IO;
namespace ConsoleApplication1{    class Program    {        [STAThread]        static void Main(string[] args)        {                        var points = new List<Point2D>();            //points.Add(new Point2D(1, 1)); // start            //points.Add(new Point2D(100, 100)); // diag            //points.Add(new Point2D(200, 125)); // x major            //points.Add(new Point2D(250, 300)); // y major            //points.Add(new Point2D(350, 300)); // horizontal            //points.Add(new Point2D(350, 450)); // vertical
            foreach(var line in File.ReadAllLines(@"C:\temp\img\data2.txt"))            {                var s = line.IndexOf(',');
                var x = double.Parse(line.Substring(0, s));                var y = double.Parse(line.Substring(s + 1));
                points.Add(new Point2D(x, y));            }
            for (var t = 0; t <= 5; t++)            {                var pc = new PixelArrayCanvas(750, 400);                var c = pc.GetColor(Colors.MidnightBlue);
                for (int i = 1; i < points.Count; i++)                {                    var p1 = points[i - 1];                    var p2 = points[i];
                    if (t == 0)                    {                        pc.DrawLineDDA((int)p1.X, (int)p1.Y, (int)p2.X, (int)p2.Y, c);                    }                    else                    {                        pc.DrawLineWu3((int)p1.X, (int)p1.Y, (int)p2.X, (int)p2.Y, c, t, BlendMode.Alpha);                        //pc.DrawLineWu3((int)Math.Round(p1.X), (int)Math.Round(p1.Y), (int)Math.Round(p2.X), (int)Math.Round(p2.Y), c, t, BlendMode.Alpha);                        //pc.DrawLine((int)p1.X, (int)p1.Y, (int)p2.X, (int)p2.Y, Colors.MidnightBlue, t);                    }                }
                for (int i = 1; i < points.Count; i++)                {                    var p1 = points[i - 1];                    var p2 = points[i];
                    //pc.DrawLineDDA((int)p1.X, (int)p1.Y, (int)p2.X, (int)p2.Y, pc.GetColor(Colors.Red));                }
                for (int i = 0; i < points.Count; i++)                {                    var p1 = points[i];
                    pc.SetPixelSafe((int)p1.X, (int)p1.Y, pc.GetColor(Colors.DeepPink));                }
                pc.Save($@"c:\temp\img\{t}.png");            }                    }    }}
//namespace SquaredInfinity.Graphics.Drawing//{public static class PixelCanvasExtensions{    public static bool HasPixel(this IPixelCanvas pc, int x, int y)    {        return x >= 0 && y >= 0 && x < pc.Width && y < pc.Height;    }
    public static void SetPixelSafe(        this IPixelCanvas pc,         int x,         int y,         int source_alpha,         int source_red,         int source_green,         int source_blue,         int isa,        BlendMode blendMode)    {        if (x < 0 || y < 0 || x > pc.Width || y > pc.Height)            return;
        if (blendMode == BlendMode.Alpha)        {            var destPixel = pc[x, y];
            var destination_alpha = ((destPixel >> 24) & 0xff);            var destination_red = ((destPixel >> 16) & 0xff);            var destination_green = ((destPixel >> 8) & 0xff);            var destination_blue = ((destPixel) & 0xff);
            destPixel =            (((((source_alpha << 8) + isa * destination_alpha) >> 8) & 0xff) << 24) |            (((((source_red << 8) + isa * destination_red) >> 8) & 0xff) << 16) |            (((((source_green << 8) + isa * destination_green) >> 8) & 0xff) << 8) |            ((((source_blue << 8) + isa * destination_blue) >> 8) & 0xff);
            pc[x, y] = destPixel;        }        else if (blendMode == BlendMode.Copy)        {            var destPixel =                (source_alpha << 24) |                (source_red << 16) |                (source_green << 8) |                (source_blue >> 8);
            pc[x, y] = destPixel;        }        else            throw new NotSupportedException(blendMode.ToString());    }
    public static void SetPixelSafe(        this IPixelCanvas pc,        int x,        int y,        int source_alpha,        int source_red,        int source_green,        int source_blue,        int isa,        int intensity = 1,        BlendMode blendMode = BlendMode.Alpha)    {        if (x < 0 || y < 0 || x > pc.Width || y > pc.Height)            return;
        if (blendMode == BlendMode.Alpha)        {            var destPixel = pc[x, y];
            var destination_alpha = ((destPixel >> 24) & 0xff);            var destination_red = ((destPixel >> 16) & 0xff);            var destination_green = ((destPixel >> 8) & 0xff);            var destination_blue = ((destPixel) & 0xff);
            if (intensity != 1)            {                source_alpha = ((source_alpha * intensity) >> 8);                source_red = ((source_red * intensity) >> 8);                source_green = ((source_green * intensity) >> 8);                source_blue = ((source_blue * intensity) >> 8);
                isa = 255 - source_alpha;            }
            destPixel =                ((((((source_alpha) << 8) + isa * destination_alpha) >> 8) & 0xff) << 24) |                ((((((source_red) << 8) + isa * destination_red) >> 8) & 0xff) << 16) |                ((((((source_green) << 8) + isa * destination_green) >> 8) & 0xff) << 8) |                                (((((source_blue) << 8) + isa * destination_blue) >> 8) & 0xff);
            pc[x, y] = destPixel;        }        else if(blendMode == BlendMode.Copy)        {            if (intensity != 1)            {                source_alpha = ((source_alpha * intensity) >> 8);                source_red = ((source_red * intensity) >> 8);                source_green = ((source_green * intensity) >> 8);                source_blue = ((source_blue * intensity) >> 8);            }
            var destPixel =                (source_alpha << 24) |                (source_red << 16) |                (source_green << 8) |                (source_blue >> 8);
            pc[x, y] = destPixel;        }        else            throw new NotSupportedException(blendMode.ToString());    }
    public static void DrawLineWu2(this PixelArrayCanvas pc, Rectangle bounds, int x1, int y1, int x2, int y2, int color, int thickness, BlendMode blendMode)    {        var x1_d = (double)x1;        var y1_d = (double)y1;        var x2_d = (double)x2;        var y2_d = (double)y2;
        if (!pc.TryCohenSutherlandClip(bounds, ref x1_d, ref y1_d, ref x2_d, ref y2_d))            return;
        DrawLineWu3(pc, (int)x1_d, (int)y1_d, (int)x2_d, (int)y2_d, color, thickness, blendMode);    }
    const ushort INTENSITY_BITS = 8;    const short NUM_LEVELS = 1 << INTENSITY_BITS; // 256
    // mask used to compute 1-value by doing value XOR mask    const ushort WEIGHT_COMPLEMENT_MASK = NUM_LEVELS - 1; // 255    const ushort INTENSITY_SHIFT = (ushort)(16 - INTENSITY_BITS); // 8
    public static void DrawLineWu3(this PixelArrayCanvas pc, int x1, int y1, int x2, int y2, int color, int thickness, BlendMode blendMode)    {        if (thickness <= 0)            throw new ArgumentOutOfRangeException("width");
        if (thickness == 1)            thickness = 2;
        // index shift determines where the line should be drawn from based on its thickness (e.g. line with thickness 1 - no shift, thickness 2, -1px shift, thickness 3, -2px shift)        var index_shift = ((thickness - 1) / 2) * -1;        
        var index_shift_terminator = index_shift + thickness - 1;
        ushort error_step, error_accumulator;        short delta_x, delta_y, x_step;        int tmp;
        // rearrange start and end points so that algorithm runs from top to bottom (in y axis, 0 is at the top, with y values increasing to the bottom)        if (y1 > y2)        {            tmp = y1;            y1 = y2;            y2 = tmp;
            tmp = x1;            x1 = x2;            x2 = tmp;        }
        // extract components of the line colour (source)
        var debug_color = pc.GetColor(Colors.Red);
        var source_alpha = ((color >> 24) & 0xff);        var source_red = ((color >> 16) & 0xff);        var source_green = ((color >> 8) & 0xff);        var source_blue = ((color) & 0xff);
        var isa = 255 - source_alpha;
        var source_half_alpha = (source_alpha * 127) >> 8;        var source_half_red = (source_red * 127) >> 8;        var source_half_green = (source_green * 127) >> 8;        var source_half_blue = (source_blue * 127) >> 8;
        var isa_half = 255 - source_half_alpha;
        var source_half =                (source_half_alpha << 24) |                (source_half_red << 16) |                (source_half_green << 8) |                (source_half_blue >> 8);
        // previously we swapped points based on y position (from top to bottom)        // now lets see what the relation of x positions is        delta_x = (short)(x2 - x1);
        if (delta_x >= 0)        {            x_step = 1;        }        else        {            x_step = -1;            delta_x = (short)-delta_x; // set delta_x to a positve value        }
        // horizontal, vertical and diagonal lines are special        // they pass through centers of every pixel and don't need to be treated in a special way
        delta_y = (short)(y2 - y1);
        #region Horizontal Line
        if (delta_y == 0)        {            while (delta_x-- >= 0)            {                pc.SetPixelSafe(x1, y1 + index_shift, source_half_alpha, source_half_red, source_half_green, source_half_blue, isa_half, blendMode);
                for (var y_shift = index_shift + 1; y_shift < index_shift_terminator; y_shift++)                {                    pc.SetPixelSafe(x1, y1 + y_shift, source_alpha, source_red, source_green, source_blue, isa, blendMode);                }
                pc.SetPixelSafe(x1, y1 + index_shift_terminator, source_half_alpha, source_half_red, source_half_green, source_half_blue, isa_half, blendMode);
                x1 += x_step;
            }
            return;        }
        #endregion
        #region Vertical Line
        if (delta_x == 0) // vertical line         {            while (delta_y-- >= 0)            {                pc.SetPixelSafe(x1 + index_shift, y1, source_half_alpha, source_half_red, source_half_green, source_half_blue, isa_half, blendMode);
                for (var x_shift = index_shift + 1; x_shift < index_shift_terminator; x_shift++)                {                    pc.SetPixelSafe(x1 + x_shift, y1, source_alpha, source_red, source_green, source_blue, isa, blendMode);                }
                pc.SetPixelSafe(x1 + index_shift_terminator, y1, source_half_alpha, source_half_red, source_half_green, source_half_blue, isa_half, blendMode);
                y1++;            }
            return;        }
        #endregion
        if (delta_x == delta_y) // diagonal line        {            while (delta_x-- >= 0)            {                pc.SetPixelSafe(x1 + index_shift, y1, source_half_alpha, source_half_red, source_half_green, source_half_blue, isa_half, blendMode);
                for (var x_shift = index_shift + 1; x_shift < index_shift_terminator; x_shift++)                {                    pc.SetPixelSafe(x1 + x_shift, y1, source_alpha, source_red, source_green, source_blue, isa, blendMode);                }
                pc.SetPixelSafe(x1 + index_shift_terminator, y1, source_half_alpha, source_half_red, source_half_green, source_half_blue, isa_half, blendMode);                //pc.SetPixelSafe(x1 + index_shift_terminator, y1, debug_color);
                x1 += x_step;                y1++;            }            return;        }
        // all other cases (not horizontal, vertical or diagonal line)
        // set cumulative error to 0        error_accumulator = 0;
        // is it Y-major line?        if (delta_y > delta_x)        {            // Y-major line; calculate 16-bit fixed-point fractional part of a            // pixel that X advances each time Y advances 1 pixel, truncating the            // result so that we won't overrun the endpoint along the X axis             error_step = (ushort)(((ulong)delta_x << 16) / (ulong)delta_y); // calculate slope * 65536
            // draw pixels between first and last            while (delta_y-- >= 0)            {                // get new accumulated error value                var new_error_accumulator = error_accumulator;
                // advance accumulated error to next position                error_accumulator += error_step;
                if (error_accumulator <= new_error_accumulator)                {                    // error accumulator overflowed, move x direction                    x1 += x_step;                }                else                {                    //pc.SetPixelSafe(x1, y1, pc.GetColor(Colors.Yellow));                    // invert intensity ?                }
                // calculate intensity using accumulated error                var intensity = (ushort)(error_accumulator >> INTENSITY_SHIFT);
                if (intensity > 1)                    pc.SetPixelSafe(x1 + index_shift_terminator, y1, source_alpha, source_red, source_green, source_blue, isa, intensity, BlendMode.Alpha);
                for (var x_shift = index_shift + 1; x_shift < index_shift_terminator; x_shift++)                {                    if (blendMode == BlendMode.Copy)                    {                        pc.SetPixelSafe(x1 + x_shift, y1, color);                    }                    else if (blendMode == BlendMode.Alpha)                    {                        //pc.SetPixelSafe(x1 + x_shift, y1, pc.GetColor(Colors.Red));                         pc.SetPixelSafe(x1 + x_shift, y1, source_alpha, source_red, source_green, source_blue, isa);                    }                }
                intensity = (ushort)(intensity ^ WEIGHT_COMPLEMENT_MASK);
                if (intensity > 1)                {                    //pc.SetPixelSafe(x1 + index_shift, y1, debug_color);                    pc.SetPixelSafe(x1 + index_shift, y1, source_alpha, source_red, source_green, source_blue, isa, intensity, BlendMode.Alpha);                }
                // move y direction                y1++;            }        }        else // it is X-major line        {            // It's an X-major line; calculate 16-bit fixed-point fractional part of a            // pixel that Y advances each time X advances 1 pixel, truncating the            // result to avoid overrunning the endpoint along the X axis */            error_step = (ushort)(((ulong)delta_y << 16) / (ulong)delta_x); // calculate slope * 65536
            // draw pixels between first and last            while (delta_x-- >= 0)            {                // get new accumulated error value                var new_error_accumulator = error_accumulator;
                // advance accumulated error to next position                error_accumulator += error_step;
                if (error_accumulator <= new_error_accumulator)                {                    // error accumulator overflowed, move y direction                    y1++;                }
                // two pixels will be set                // with colors components adjusted by intensity settings                // the sum of intensity of two bordering pixels equals the intensity of the line's pixel
                // calculate intensity using accumulated error                var intensity = (ushort)(error_accumulator >> INTENSITY_SHIFT);
                if (intensity > 1)                    pc.SetPixelSafe(x1, y1 + index_shift_terminator, source_alpha, source_red, source_green, source_blue, isa, intensity, blendMode);
                for (var y_shift = index_shift + 1; y_shift < index_shift_terminator; y_shift++)                {                    pc.SetPixelSafe(x1, y1 + y_shift, source_alpha, source_red, source_green, source_blue, isa, blendMode);                }
                intensity = (ushort)(intensity ^ WEIGHT_COMPLEMENT_MASK);
                //pc.SetPixelSafe(x1, y1 + index_shift, debug_color);
                if (intensity > 1)                {                    pc.SetPixelSafe(x1, y1 + index_shift, source_alpha, source_red, source_green, source_blue, isa, intensity, blendMode);                    //pc.SetPixelSafe(x1, y1 + index_shift, debug_color);                }
                // move x direction                x1 += x_step;            }        }    }}//}
        

        
       
 



    public class TestContainer : ExtendedPropertyContainer
    {
        public string Name { get; set; }

        public IExtendedProperty<string> ToolTip { get; private set; }

        public IExtendedProperty<int> Count { get; private set; }

        public CollectionExtendedProperty<int> Items { get; private set; }

        public TestContainer()
        {
            ToolTip = ExtendedProperties.RegisterProperty<string>("ToolTip", () => "[UNSET]");
            Count = ExtendedProperties.RegisterProperty<int>("Count", () => 69);
            Items = ExtendedProperties.RegisterCollectionProperty("Items", () => new Collection<int>());
        }
    }

    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void ExtendedPropertyCanBeRegistered()
        {
            var tc = new TestContainer();

            tc.ExtendedProperties.RegisterProperty<int>("Grid.Row");

            tc.Count.Value++;

            tc.ExtendedProperties["Grid.Row"].Value = 3;

            // default of Count is 69, + 1 == 70
            Assert.AreEqual(70, tc.Count.ActualValue);

            Assert.AreEqual(3, tc.ExtendedProperties["Grid.Row"].ActualValue);
        }

        [TestMethod]
        public void ValueOfExtendedPropertyCanBeInherited()
        {
            // leaf
            var tc = new TestContainer { Name = "1" };

            // parent
            var parentTC = new TestContainer { Name = "Parent" };
            tc.Parent = parentTC;

            // grand parent
            var grandParentTC = new TestContainer { Name = "Parent" };
            parentTC.Parent = grandParentTC;

            tc.Count.Value = 1;
            parentTC.Count.Value = 13;
            grandParentTC.Count.Value = 69;

            tc.Count.IsValueSet = false;
            parentTC.Count.IsValueSet = false;
            Assert.AreEqual(69, tc.Count.ActualValue);
            Assert.AreEqual(69, parentTC.Count.ActualValue);
            Assert.AreEqual(69, grandParentTC.Count.ActualValue);

            tc.Count.IsValueSet = false;
            parentTC.Count.IsValueSet = true;
            Assert.AreEqual(13, tc.Count.ActualValue);
            Assert.AreEqual(13, parentTC.Count.ActualValue);
            Assert.AreEqual(69, grandParentTC.Count.ActualValue);


            tc.Count.IsValueSet = true;
            parentTC.Count.IsValueSet = false;
            Assert.AreEqual(1, tc.Count.ActualValue);
            Assert.AreEqual(69, parentTC.Count.ActualValue);
            Assert.AreEqual(69, grandParentTC.Count.ActualValue);


            tc.Count.IsValueSet = true;
            parentTC.Count.IsValueSet = true;
            Assert.AreEqual(1, tc.Count.ActualValue);
            Assert.AreEqual(13, parentTC.Count.ActualValue);
            Assert.AreEqual(69, grandParentTC.Count.ActualValue);
        }


        [TestMethod]
        public void DefaultValueIsSetAndReturnedAsActualValueIfNoInheritance()
        {
            var tc = new TestContainer();

            Assert.AreEqual("[UNSET]", tc.ToolTip.ActualValue);
        }

        [TestMethod]
        public void DefaultValueIsSetAndReturnedAsValue()
        {
            var tc = new TestContainer();

            Assert.AreEqual("[UNSET]", tc.ToolTip.Value);
        }

    }

    [TestClass]
    public class CollectionExtendedPropertyTests
    {
        [TestMethod]
        public void CanMergeInheritedCollectionItems()
        {
            var tc_parent = new TestContainer() { Name = "Parent" };
            tc_parent.Items.Value.Add(1);
            tc_parent.Items.Value.Add(2);
            tc_parent.Items.Value.Add(3);
            tc_parent.Items.IsValueSet = true;

            var tc = new TestContainer() { Name = "Child" };
            tc.Parent = tc_parent;
            tc.Items.Value.Add(4);
            tc.Items.Value.Add(5);
            tc.Items.Value.Add(6);
            tc.Items.IsValueSet = true;
            tc.Items.InheritanceMode = CollectionInheritanceMode.Replace;

            var x = tc.Items.ActualValue;
        }
    }

    [TestClass]
    public class ExtendedPropertyTests
    {
        [TestMethod]
        public void SettingValue_MarksValueAsSet()
        {
            var tc = new TestContainer();

            Assert.IsFalse(tc.Count.IsValueSet);

            tc.Count.Value = 13;

            Assert.AreEqual(13, tc.Count.Value);
            Assert.IsTrue(tc.Count.IsValueSet);
        }

        #region No Parent

        [TestMethod]
        public void ValueIsNotSet_And_NoParent__TryGetInheritedPropertyValueReturnsFalse()
        {
            var tc = new TestContainer();

            var val = (object) null;
            var res = tc.TryGetInheritedPropertyValue(tc.Count.UniqueName, out val);

            Assert.IsNull(val);
            Assert.IsFalse(res);
        }

        [TestMethod]
        public void ValueIsSet_And_NoParent__TryGetInheritedPropertyValueReturnsFalse()
        {
            var tc = new TestContainer();

            tc.Count.Value = 13;

            var val = (object)null;
            var res = tc.TryGetInheritedPropertyValue(tc.Count.UniqueName, out val);

            Assert.IsNull(val);
            Assert.IsFalse(res);
        }

        [TestMethod]
        public void ValueIsNotSet_And_NoParent__TryGetActualPropertyValueReturnsTrue_And_DefaultValue()
        {
            var tc = new TestContainer();

            var val = (object)null;
            var res = tc.TryGetActualPropertyValue(tc.Count.UniqueName, out val);

            Assert.AreEqual(69, val);
            Assert.IsTrue(res);
        }

        [TestMethod]
        public void ValueIsSet_And_NoParent__TryGetActualPropertyValueReturnsTrue()
        {
            var tc = new TestContainer();

            tc.Count.Value = 13;

            var val = (object)null;
            var res = tc.TryGetActualPropertyValue(tc.Count.UniqueName, out val);

            Assert.AreEqual(13, val);
            Assert.IsTrue(res);
        }

        #endregion

        #region Has Parent

        [TestMethod]
        public void ValueIsNotSet_And_HasParent__TryGetInheritedPropertyValueReturnsFalse()
        {
            var tc = new TestContainer();

            var val = (object)null;
            var res = tc.TryGetInheritedPropertyValue(tc.Count.UniqueName, out val);

            Assert.IsNull(val);
            Assert.IsFalse(res);
        }

        [TestMethod]
        public void ValueIsSet_And_HasParent__TryGetInheritedPropertyValueReturnsFalse()
        {
            var tc = new TestContainer();

            tc.Count.Value = 13;

            var val = (object)null;
            var res = tc.TryGetInheritedPropertyValue(tc.Count.UniqueName, out val);

            Assert.IsNull(val);
            Assert.IsFalse(res);
        }

        [TestMethod]
        public void ValueIsNotSet_And_HasParent__TryGetActualPropertyValueReturnsTrue_And_DefaultValue()
        {
            var tc = new TestContainer();

            var val = (object)null;
            var res = tc.TryGetActualPropertyValue(tc.Count.UniqueName, out val);

            Assert.AreEqual(69, val);
            Assert.IsTrue(res);
        }

        [TestMethod]
        public void ValueIsSet_And_HasParent__TryGetActualPropertyValueReturnsTrue()
        {
            var tc = new TestContainer();

            tc.Count.Value = 13;

            var val = (object)null;
            var res = tc.TryGetActualPropertyValue(tc.Count.UniqueName, out val);

            Assert.AreEqual(13, val);
            Assert.IsTrue(res);
        }

        #endregion
        
        
        612.046843719453, 63.6664481404097611.952250644639, 63.6971904286166611.803508289666, 63.4755367392353608.899711099713, 59.1334214985079606.353349608457, 55.3404793013746605.706669307663, 54.3844790679965605.028373899198, 53.7959818282783602.498744871842, 51.6026472665984601.671707108403, 51.1443981018683599.279973763443, 49.8458766052041596.844853728168, 48.9041454068592592.810143777107, 47.3603565811258590.280598832485, 46.646573981772583.901410032505, 44.8238281417138579.419043610058, 43.7889813350457555.795116857846, 37.7915491127786540.260117201849, 33.8705672216915522.799160501275, 31.8031032815677515.08780691835, 30.0957151866269514.953232503914, 30.1586330268999501.990281614156, 29.3959122670659485.423166408524, 28.25470.663409552335, 28.7881439683255461.99973493355, 29.1722614123272456.931143695457, 29.8672337372305439.001257592006, 31.8771236278261433.259836323104, 33.029168042179425.635424286274, 34.2232945356705421.762153182896, 34.9316317969686411.77648779188, 36.3847585284377383.791147628882, 38.8471519714016380.857837399588, 39.0625021524087380.36393542496, 39.0151636350509379.064773114783, 39.0810558288156376.838892960996, 39.2005453483872368.810295225829, 39.7779542769052347.01722794698, 41.0432446890728339.906603451172, 41.3487776173609333.350756828806, 41.7064403490282310.522841311493, 42.9799047737653297.66764244429, 44.0021018428407280.911803544062, 44.9642637049831267.461467091497, 45.7586322847899255.892523834929, 46.2363425002852248.670952172706, 46.7247643192144243.908295959245, 46.945524897267236.146198446852, 47.3207334755788220.364836382673, 48.490801991653216.249449049138, 48.7650507048556207.335796464645, 49.4078932263798194.428193033995, 50.2059972185564189.878076949299, 50.8484040693599187.20763036457, 51.2542242483112184.435758982958, 51.4901699710078183.173656137425, 51.5545859070924178.379279712876, 51.3495400483693177.141686984061, 51.2777340886312177.118438108341, 51.0475448973621177.105888760415, 50.8963442272369180.60986849972, 50.6439489320903183.048835320037, 50.4813170921025183.607333854422, 50.4604038056017185.94912205588, 50.3615698825808187.071542460938, 50.3075139560154187.984176446742, 50.275768956358190.678838858623, 50.1945726001333192.428831763363, 50.2569914391046194.633943482057, 50.2635439704204205.278207901294, 50.4253273990047207.545814111415, 50.5799271742768224.792128614895, 50.2211081135538227.013258094257, 50.2927328168016232.83724860713, 50.3927580098884237.178145831022, 50.5124538998013240.80059814136, 50.5816982467305243.225628248655, 50.6308700752163244.752150269317, 50.6656887918631246.418417792505, 50.7112081928784252.65294225007, 50.8816449810157253.517102540203, 50.9313900604499263.874287487722, 51.5945824446857266.056570744361, 51.702973825898266.338500148673, 51.7328440219777272.483224247215, 52.1876045452224273.903339569054, 52.298023596932276.610509287493, 52.5499046040849277.148596738401, 52.571919624313277.319578976298, 52.5865315180087277.496236798683, 52.599680256903277.54550928032, 52.6103230702233278.325586837285, 52.7219585058497278.544159902155, 52.7459193035824278.989714305211, 52.7948727507546279.168936650959, 52.8191261794475280.537341091899, 52.8949230576924283.295759236204, 52.9985089580981283.479732256376, 52.9911757135861283.449630637902, 52.9858930696091284.705364216397, 52.8544406216763284.850448972478, 52.7413955346703284.935288450245, 52.7440390404719285.277505174238, 52.7626374850481286.605928275557, 52.7964057875764287.930189281585, 52.7751354476277288.89154921126, 52.8388787692663291.90982504242, 53.3905896767017296.380840295889, 54.1122465602721297.696945276799, 54.5764023935829297.935572073529, 54.6701147288456300.978358021409, 57.1040787464464302.870513807252, 59.4119573098739303.495416680155, 60.398356768064304.818752776118, 63.2671254197366305.949665537226, 65.8112791204235306.590796377631, 66.9185687413355306.807393498271, 67.2923409165568307.289818179822, 68.0349157272308308.16179816414, 69.3774705400709308.861030173164, 70.4090787518576309.600075356343, 70.762844468983311.618102993738, 71.3451254846084313.443623213546, 72.1519117718621313.91751349768, 72.2111531627199315.214321491328, 72.3706818042409316.843928942855, 73.8500284881322317.482116887599, 74.5024175487822318.993251768092, 77.4366325551189320.25117149765, 79.8105630036467321.529523331368, 82.8370823317265323.366394720153, 87.1664176250031325.32817100906, 90.655854018392326.649110747127, 93.1798200727368328.314159070684, 93.9696135640228330.090911305254, 94.5352670264276332.227579679149, 92.4843301841202333.324018519659, 91.3837516939529334.030565726468, 89.7146938871824336.158111123815, 84.7721198432587338.269764884593, 76.4509499335908338.42216483846, 75.8480777439023338.513941141713, 75.2617796040124339.982277911023, 65.8502776554134340.315287575734, 56.6161592045385340.611342879219, 48.1396983427409340.200850975893, 45.2563508957905339.672559163399, 41.3739526151974338.753787138074, 38.6325704926184337.969337278984, 36.4774788665832336.506802218262, 34.7155893471972335.83376198062, 33.848161298912333.063320005472, 32.3943903425676331.656573838206, 31.6683816653697330.644932434097, 31.4325232951986329.176385457954, 31.0861006497443328.407112532201, 30.9049446148269325.068943942703, 30.1819998274594317.919389141439, 29.4604526804992314.926758543894, 29.1078585791215314.18174348666, 29.068707177212313.135922451518, 29.0499154651733313.066049700256, 29.0782744625626313.107208198141, 29.1093217339229312.767682121609, 29.1238528265325311.983610634819, 29.1622792024807311.075054661574, 29.2138914421465310.673937982996, 29.2424666370364310.367834792899, 29.2605464259927309.349256563303, 29.3409216684781307.932420468058, 29.4407022744936307.585200821441, 29.4405406723214307.420861119464, 29.4524730272988307.357504780022, 29.4590528562788307.353931263863, 29.4844855440654307.16394632827, 29.5143994164078307.27888742451, 29.5290396996743307.241050194585, 29.5193413855355307.212462065308, 29.5143819459028307.220744214525, 29.4938169775972307.848632024456, 29.5281093952782309.554250266766, 29.6235311102734310.761552190957, 29.7024912418464313.945975502857, 29.8592933926666316.704015274863, 29.9962730716476319.317727035387, 30.1297499143578320.298047621391, 30.1808642446285322.145555475922, 30.3401559424242328.061154126582, 30.8242505356237329.008472239817, 30.9024616192909332.657242445637, 31.1793494706688341.073629746176, 31.8453993743936345.326996844839, 32.1395262466703358.066876243503, 32.7080579747889365.832295023855, 33.0438716560265366.647981618317, 33.0781706251469371.639805321027, 33.2735738569661383.367034322784, 33.7969268589188385.173762051728, 33.8803397854769386.179265416316, 33.9391498732403387.586389955881, 34.027454541224388.81845424499, 34.1254531557202390.63569231558, 34.2102637226856411.424853801771, 35.3474822296554419.085967951629, 35.8762379853075448.507399155767, 38.0165320935304454.371076718695, 38.3856816822952475.324409741396, 39.6090974775722501.427852211996, 42.3756829875584514.473750718025, 43.8227605566397515.772660780002, 43.90467101976528.247175072788, 45.5839523477286541.803203520946, 47.4484854521519544.905141671608, 47.8467998653534545.873018013104, 47.9733474689818546.350565896131, 48.0321728434372546.637750471266, 48.0655000157118579.801704128705, 52.8334771074734579.828526520586, 52.8370017818756579.840718516895, 52.8393078885476579.85198560314, 52.8415703189569579.930350710452, 52.8560610110235590.623992714743, 54.8839160403858592.797783615332, 55.5409020276879595.967618573027, 56.4679650991488597.092981873746, 56.9447946919967599.142246246514, 57.9232532596697601.470917541598, 58.1977514735231602.015857735259, 58.2604236348182602.416175627871, 58.3794998677537602.98415449042, 58.0430659835854605.802607706207, 56.3910162594744608.073598246339, 55.053382123584609.089065414807, 54.6422541868046612.014808198116, 54.4567998616815614.000253776409, 53.9347402230589614.262844152093, 53.8453174427494614.578406649672, 53.7961936581526614.971241179032, 53.9482842321309615.72260448262, 54.3728142301284616.505162480214, 54.8212586198293616.67812066234, 54.875097802941617.710572542908, 55.1376445534522617.833333333333, 55.0036556065614617.716290168764, 55.36252380308617.726632344943, 55.8801737770269617.065994310443, 57.3478419742181616.503396742817, 58.7513221708208615.298659341988, 61.3164405458613614.545698466469, 62.9429849362768613.63743678279, 63.1856194397557612.046843719453, 63.6664481404097150.736786894371, 126.032751119088150.737837928536, 126.029942735395150.73748057692, 126.028719800038150.502973834115, 125.272985058428150.286418754841, 124.877422249778150.138033751483, 124.606642523743150.07492966024, 124.492817815447150.017059719137, 124.376044959417149.230108398736, 123.728007146442148.84017472367, 123.410437040145146.86694216237, 121.456885160843144.971696336082, 120.74338536529143.60404863974, 120.14737034885143.412487152901, 120.071836620088143.288654307628, 120.028592752361135.649885144109, 117.621467252253130.964795251995, 116.142628304916130.506187004614, 116.001396741759130.211371921445, 115.879400204706122.949020133635, 112.841484647774101.793762427231, 99.812807432092100.769676778613, 99.386302175112798.4259126329254, 97.990411002135696.8149084861122, 97.123487414684992.4742424897371, 94.597496965562688.2916520317176, 93.045751416666687.3194664501474, 92.835161948296883.2558110181939, 93.959677214252280.1893978222946, 94.128103802397479.1741408606591, 94.75607892408977.1072821759763, 96.858922820835770.2480650523406, 107.29549464469166.5360436104951, 115.43300696149464.9964046834581, 119.13134255188563.5654847304072, 122.61107407969661.0478795338947, 128.65831471197860.4790388233308, 129.64141497447259.1791828306053, 131.65917095998558.645740950705, 131.63103907916258.1004013640614, 131.42800997187157.9897064458459, 131.37044902522157.8356878993657, 130.50292488915857.2173645003324, 128.58124357876856.900982196105, 124.66779802681556.7105137847965, 123.00820486617756.6701330521926, 122.65515653166756.3578708018904, 114.88258559571556.3033641701143, 113.37006788218956.2732625516402, 112.064942534656.2372541211611, 110.08009661305356.2301491302084, 109.66287911334256.2186928578143, 108.72483965110556.1982397329712, 107.1165224229156.190735349036, 106.20299407931556.1771349669461, 104.42422586819856.1723842925221, 102.17917861144856.1667507493998, 100.38645583438956.1666666666667, 100.05086053446556.7838549488022, 100.33051964471356.8327070167727, 100.33901031018856.8813068365437, 100.43192719151557.5234256490635, 101.50740711730657.9807306140803, 102.31342197256958.0971641788345, 102.52453992371858.613915636201, 103.39328262751158.7254513817481, 103.6024089410858.7429405902471, 103.65897843656559.0800492882004, 104.16205473354660.4523635762333, 106.3402336320660.5278908913013, 106.43137725712161.3391000802217, 107.63067938774562.0329087529564, 108.66346139909362.319357604176, 109.03519007117263.0596009663027, 109.95675484710963.3219180731032, 110.29915054113963.488002491793, 110.47845907014363.6863746800193, 110.65448751181664.3271271481251, 111.14394118245265.1210363146962, 111.60806698833365.3315584578653, 111.64546697210766.9094970698602, 112.36697262661767.6629624417775, 112.81283301942568.1269309633979, 113.07731026074869.76896163875, 114.19552740961870.2007895356169, 114.358374355270.3623965487656, 114.43514848982471.0110948351557, 114.74721538701673.4128550460462, 115.69934044398474.4718980909789, 116.23409513432174.8007456603984, 116.49603041715475.7395714175843, 117.08448944014376.9644045916408, 118.58431919934777.3606444716944, 119.0053540044277.4535558918449, 119.49796546885177.5671937057213, 119.8928731335677.5990820822752, 119.99068175631377.6366250226347, 120.45250145552177.6313908724949, 120.75796013416377.6322947618765, 122.42517480264677.6380334084152, 122.55071348460677.6401985387943, 122.94481313845477.6536517761011, 124.59005864678577.6765012588395, 125.85932141504877.6763961554231, 126.05050988751477.7088731111092, 127.03372807591777.71858466679, 128.55497667436377.7311340147154, 129.75712212969277.8104240320927, 131.9582048603877.7876165907209, 133.41544589579877.8651408707017, 133.03502564743677.9246083837346, 134.76972014183477.8677053940633, 138.43261681264877.9377883521587, 139.83775206663177.9007499081982, 142.06569569889777.9983068993563, 144.62874108931877.9618360138447, 147.07989662988277.9541424437598, 148.00533549032277.9922949839348, 149.8402801105678.0486724565238, 151.10618417421978.1319564037266, 150.90560530526778.1467129233976, 151.99506600275778.1389562912628, 155.5380844352678.1074883283748, 156.60372409905878.1614694430685, 156.94611979308978.1741238944103, 157.64709760411778.3575713974993, 157.40817971174278.2359877653386, 161.77258267636378.2277056161215, 162.42027544686378.3713609657388, 163.95284930023578.3835529620482, 164.91349122843478.3440971395092, 167.82320385138178.3495414964818, 168.34986969786178.3550699361876, 169.11770713187478.3535984883571, 170.86114998169778.362153906457, 171.28082645499878.367703366846, 171.59162674057278.3728954756191, 171.9269119390378.4310176649214, 174.95600925851778.4659960819193, 174.85803466596678.461728883211, 175.74071446519678.4858185862636, 177.54724330890378.5371300741793, 181.27002450354378.5359949572815, 181.6175565260778.5689343680001, 183.7724559765578.5816939227583, 184.0228170497678.6106604243346, 186.55689634273978.6113541068832, 186.73731424881678.6578728790084, 188.3837171781178.6866291737518, 189.67524173748578.7398115024805, 195.127576730478.767642887159, 196.677062032778.7868557916879, 197.28148909734278.7852371990744, 197.48803414378378.8478367939179, 199.54674972848278.845755746272, 200.22487611885278.886220561609, 201.85962622124978.8742597928159, 204.31587441404778.8743228548658, 204.33749416409878.8749324546812, 204.35103380554378.9279255972603, 206.40673572811478.9237845226518, 207.49215200367678.9535918515598, 210.10718961724878.9667718199838, 210.84461963714978.9722161769565, 211.14685937522878.9724474044727, 211.37172224625778.9763992929316, 212.0692845735479.002422898847, 214.01740312575979.009191558867, 215.10855846224379.0352151647825, 217.63654054894679.0525572284984, 223.88680592089379.0617012257304, 224.94850598579379.0661155692217, 225.75038469897679.1133910859453, 227.41046703375679.2271760446048, 231.46304768825679.536705606079, 240.03896922744580.2469734738313, 246.75891165826580.6390512585931, 249.89724331083581.3163376742604, 251.92502736627182.3436394874222, 254.57283964739483.7886853396453, 254.85083032440684.9193458525537, 254.27577117882387.3485590758235, 253.33302778308987.823626518222, 252.87161427312488.2798173870243, 253.03283209410690.730913141601, 253.92071810385391.1938726704233, 254.40175099103693.6495929753243, 257.09320459387794.1758247608554, 257.60315116698596.5708583530925, 259.97283300705696.8927060349758, 260.2559076010597.2423220394878, 260.556627405185102.395101114165, 265.264474294142103.09555232282, 265.798023519629103.982499033641, 266.48085821112105.446589624927, 267.681536144021108.093261816852, 269.442475704692108.411388837793, 269.691482813758109.656485950543, 270.421155929399112.023288765118, 271.870788559849114.567590229412, 273.097113194224115.657933071766, 273.679195482854116.342471623169, 274.060576608996118.411600541647, 275.197102847201121.004733053228, 276.886238631948121.117761267289, 276.946040170875121.243485974058, 277.032326995521123.935625903944, 278.510751018362124.136688739632, 278.597579428666125.982830249749, 279.894100552497130.748345276138, 282.909282614679132.261350997444, 283.874912372082132.780603916122, 284.194028618079134.639420898264, 285.355048504422136.860487315577, 286.765127911347138.959444583647, 288.097690687181140.632943221887, 288.93905274187142.850415102357, 290.220688995364145.393812677268, 291.848118956128145.951113032705, 292.650347079413146.58547521309, 292.808123210892149.32623598343, 294.793261763399151.135780483936, 296.054317761895152.519929416662, 296.920348169773156.473100137233, 299.648419951286158.727421275514, 301.108762001358159.790521312322, 301.721539967433162.216539391731, 303.371926171887163.637915954568, 304.520489588101165.589055777728, 305.717184245841166.087477199264, 305.780986530434168.829982686317, 307.463710639812169.204466159164, 307.762264101316171.134900609282, 308.804065260917171.800373400939, 309.048128217042171.922209281299, 309.087541676528174.276778058199, 309.768838963571174.863528390928, 309.899640635189176.624788381912, 310.210615625813177.642021287777, 310.404223763234178.84665358519, 310.58237050365180.260021267692, 310.728738395304180.946493721958, 310.75182.7123362219, 310.672430957395182.921113648355, 310.654663453717183.779114878284, 310.536283311219184.653112848197, 310.258607103299184.971387013921, 310.150796616381186.570640598774, 309.454859046071187.054011211073, 309.217120412789188.235583818914, 308.572056953305188.989070211515, 308.114067662339189.788318631642, 307.554085562649190.771245782375, 306.818262829216191.216316709715, 306.414379692517191.502618416152, 306.070140860199193.059830634421, 304.431652069712193.710315678891, 303.818943985657193.832025435152, 303.687321200299195.351127154612, 301.670001977414195.725547565409, 301.227159614361196.200026428675, 300.497870849832196.882946387465, 299.229442298188197.261213583304, 298.499105303353197.71532340446, 297.467786446807197.88996324125, 297.159222385886198.354015845603, 296.127728824289198.4149127651, 296.080523519532198.652950982698, 295.102856584121198.90269772089, 294.270928602181199.009041357664, 293.765838829489199.153621617346, 292.745229392563199.173317997591, 292.574664851358199.198816086424, 291.969591378027199.239007632878, 291.308856875477199.243842390035, 291.207265888371199.217314287721, 290.923946707306199.114733353256, 288.374039136714199.02465972535, 287.591517743173198.649966045671, 286.208901970252198.165586440574, 284.285521653242197.656612636025, 282.793907399057197.356521361349, 281.682940509799197.016869160718, 280.792346571763196.560741353965, 279.856049792408196.396380631305, 279.43681008173496.1983087831089, 134.52412414888894.2136199494144, 134.5027708240491.7714369645534, 134.54413224484489.9140073475085, 134.57331672359888.3757557855688, 134.71042087992885.5965902268543, 134.99118063199783.1330922691353, 134.45011035406982.3226398248135, 134.26345111004881.6451011609468, 133.68903837315379.2381067999166, 131.61648614842176.9639631572917, 129.57138445481476.6103322022709, 129.258815280676.5254717038212, 129.23889016954474.6032353201871, 128.53103771476273.3571712560058, 129.38731958079973.3231808111227, 129.40157114532773.2895687385388, 129.58061324912972.9009173251536, 131.60680748860173.2242574755507, 138.37024710947273.3261237067835, 140.50422563010473.772603019905, 146.75421147397174.5644521595134, 157.91117302382475.348103232638, 165.33028506839676.4818537859904, 175.88746670796277.4682913908326, 179.06978909235278.9558200439887, 183.23673167317980.9332357212642, 178.08258326116181.8749623327444, 175.80314531513984.3889519717307, 159.11347571369885.1126730767899, 154.2977397205586.1257438873631, 146.02001349751188.4865768278841, 126.72087500599689.0953147953362, 122.93820055227791.7227530620493, 106.92875816944294.7363412808358, 97.777524162346394.9745476639004, 97.025292257006495.5122777631922, 96.141511815955898.3059475933781, 91.5934239608055100.560520979858, 89.2587661158162101.783399230369, 88.0091511143419104.194828955573, 86.2674749693464106.477633119715, 84.6102840031591108.338047673787, 83.1944327781153124.944618701958, 70.9073654006773131.759566266581, 67.1833003968896139.634649951668, 62.5624139706865141.720574396097, 61.514134324684144.654178914957, 60.1914374706466146.633696660562, 59.3305783322757153.416230331549, 56.5339206234945159.12042397034, 54.4111341451862164.603374917484, 52.7226933589702165.381497550903, 52.4626350635279166.024436170071, 52.2835776730346166.949220110818, 52.060343926605174.649306607499, 50.2858669083008175.267756130632, 50.1840204150582176.770713965325, 49.8590253440984177.273886061285, 49.7907113015654177.691966431279, 49.7414095361979178.791180001982, 49.5814168343854178.840053090636, 49.5728726654893178.873875370053, 49.5372088131586178.916505315769, 49.4679644662295178.921949672742, 49.4893800297517178.880160554357, 49.4340378372489177.344641681245, 49.5955089805547176.911678667481, 49.5180360257276176.580287595383, 49.5304870363248175.151154400412, 49.599164683745171.34395130462, 49.8151012185793171.124222102169, 49.8954568067465169.172830030809, 50.0077048019577163.768601542594, 50.1460471803359162.640274325531, 50.3027477838452161.358916534102, 50.3435960085616152.706908394544, 50.6536385109765147.726162591929, 51.1016172025261142.376377673439, 51.5146461486407141.036582382459, 51.485977049786134.472180341993, 52.7306697364509130.884265014304, 53.2369889959396128.246673757561, 53.8474384712582123.068669862933, 54.937685341477122.067854110719, 55.3302563261298121.639305440446, 55.4630671058334120.038622449129, 55.8143083349731114.226676787783, 57.8555616038805113.647683087189, 58.2721048512848112.277807198418, 59.0004403813796111.789349580762, 59.2636854061411110.951275958595, 59.8091961951056109.561703689579, 60.7122707617048109.446762593339, 60.7790396199554109.179379501865, 61.0195764003064108.340254845533, 61.7027295190505107.992089268168, 62.1309631958832107.747744845582, 62.4077554371922107.688256311866, 62.8082984658215107.593999567984, 63.1628943731595107.619182346568, 64.4683563350699107.621767890613, 65.1021760231561107.633350287107, 66.9894479453739107.706502264963, 68.6866026919574107.713460111133, 69.8439019066698107.750982030809, 70.5061825489212107.762438303203, 71.3301226883613107.772780479383, 73.5877175894398107.78585534439, 74.4113383462088107.807044193149, 75.4235805031018107.827539359358, 76.3108091850949107.885640527977, 77.3972387499513107.888247092705, 77.4850542437925107.86733151283, 78.3646472231541107.893165932596, 79.2029191822551107.938129174157, 79.6665776521241107.988494731325, 79.9176026045276107.984626925599, 80.0407740330472107.914964381169, 80.0503282155189108.013236075559, 80.3505468345397108.011344214063, 80.5422899955423108.032554083505, 80.748634131175108.083907612787, 80.8594779345395108.148062738194, 80.9071745972517108.177575777536, 80.8748694495249108.120988098114, 80.7131930277843108.219596123437, 80.7225746890182108.180939086863, 80.6936129592032108.198974833127, 80.7666724276817108.192710669506, 80.5618045497292108.32312298865, 80.6066567958313108.341242817647, 80.4798798918235108.341978541563, 80.4572610472632108.436130182027, 79.9871461338565108.450361184616, 79.9532631811385108.513843648158, 79.9612395586193108.561161206248, 79.7617580557678108.571082968762, 79.7211434990569108.58403170967, 79.4717738770108108.625400414388, 79.1934174112986108.685183237671, 79.2340767361788108.691720670174, 79.1717954774351108.707065768977, 79.1176521983442108.727161542205, 79.0059709026419108.772587238799, 79.1200805985519108.780596119133, 79.0555008764821108.797833079432, 79.0707559031464108.815511474081, 79.0765855923141108.851982359592, 79.2812307213266108.852255628475, 79.2763324284617108.850090498096, 79.165134847369108.856249558301, 79.1848273823266108.911470893309, 79.7771200892758108.923515744835, 79.8970889558308108.925134337448, 79.929992468357108.928140295159, 79.9898354997339108.933668734865, 80.2565096570729108.951998770695, 80.496024822341108.957569251768, 80.8902183801541108.994586675045, 81.6983548098793109.029943464342, 83.0437867965266109.037132538028, 83.4107001606397109.056702794173, 84.3844471514709109.066267205071, 85.0420893746205109.134100950054, 85.4581734753129109.343929410674, 86.5752528575388109.943901753194, 87.4661852866112110.09630170706, 87.682074869463110.536937270227, 87.9345520576023111.175104194288, 88.2443892815823111.505675459737, 87.8974927486775113.407374635795, 87.3013510710753114.005013682469, 86.8562637481183115.758916434301, 84.9859697446411116.782981062236, 83.8421845115701117.554776469984, 82.7432984765836121.025921901986, 79.7481670947134121.437065446494, 79.2924762670725121.932144579386, 79.1338964923593127.578026842726, 75.4728134783555127.912360810485, 75.2981935961554128.208184886453, 75.2940454431028130.968873264554, 74.2779401207714135.057564330308, 72.5484594802363135.171265206234, 72.4051587541319135.686881546703, 72.3149967530757137.889765072968, 71.7549447713658150.470076464763, 68.5993397028399152.349851068147, 67.9626517126873152.96479013717, 67.2499408196303157.555980637019, 66.8214166274063161.269452506012, 65.7291685654245162.534624371305, 65.3647089883468167.844785301789, 63.9908170029526169.121707729043, 63.4878509885349175.702800192043, 61.8082325344133175.98546532027, 61.7105941125963176.129351897404, 61.6576867352523176.195861339339, 61.6561830434196176.278010169644, 61.6333890843434183.926091495861, 58.6827624493099191.244757694209, 57.0632911225445193.527225527418, 56.3744231013107194.423232152738, 56.1097804361419197.607277092339, 55.1808381934771198.015856113485, 55.0566332753908200.855498178031, 54.2071479817876201.55393140109, 53.9932036304869202.690246477804, 53.6906150282599203.338209040279, 53.5158477386731204.763222181324, 53.0667411076385207.281016563987, 52.3356605244313208.446361204327, 51.9093681892328213.154216496446, 50.5344514495243213.403332614139, 50.4549115155636214.385439958223, 50.1446091393855217.566037505764, 49.1889026288742221.292121784732, 47.9718537407965224.020627496713, 47.1361423025979224.208258115777, 47.0819149467013224.590119848459, 46.9555627943485226.221955492414, 46.3255883917306228.717194681904, 45.159227990362229.617594630033, 44.6646401750421229.826750428788, 44.49813752627229.833897461107, 44.4811430924425230.965440842714, 42.8031731442622231.251322135484, 42.2195949436339231.532705002031, 42.2449359112687231.557803697881, 42.0109294146372231.496885757701, 41.7225416032829231.462537961202, 41.4653015186932231.132891605817, 41.2735146814279228.487438613523, 38.4453631115001150.736786894371, 126.032751119088150.548399530709, 126.536172458545149.115776902311, 127.68523815178148.165116500432, 128.272046212037142.907402174761, 130.292898844577142.894642620003, 130.297790586003131.294988145146, 132.235977156078129.768844496782, 132.824864206441128.875276270724, 132.944384299396124.200780802989, 133.503719990397118.87966809651, 134.161366581173118.709274437745, 134.172394837512118.275512638015, 134.224793249907114.600319433297, 134.338622325829114.362890815515, 134.318382745681110.969921304675, 134.50466200621698.6521372265136, 134.5462461759698.2408044958563, 134.54556045863597.9786765752055, 134.545398856463
    }



    

    


    
