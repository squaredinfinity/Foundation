       
            public static class Highlight
    {

        #region Selection Highlight Brush

        public static Brush GetSelectionHighlightBrush(DependencyObject obj)
        {
            return (Brush)obj.GetValue(SelectionHighlightBrushProperty);
        }

        public static void SetSelectionHighlightBrush(DependencyObject obj, Brush value)
        {
            obj.SetValue(SelectionHighlightBrushProperty, value);
        }

        public static readonly DependencyProperty SelectionHighlightBrushProperty =
            DependencyProperty.RegisterAttached(
            "SelectionHighlightBrush",
            typeof(Brush),
            typeof(Highlight),
            new FrameworkPropertyMetadata(null, 
                FrameworkPropertyMetadataOptions.Inherits,
                AfterSelectionHighlightBrushChanged));

        static void AfterSelectionHighlightBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            RaiseAfterSelectionHighlightBrushChanged(d as UIElement, (Brush)e.NewValue);
        }

        #endregion

        #region After Selection Highlight Brush Changed

        public static readonly RoutedEvent AfterSelectionHighlightBrushChangedEvent =
            EventManager.RegisterRoutedEvent(
            "AfterSelectionHighlightBrushChanged",
            RoutingStrategy.Bubble,
            typeof(RoutedEventHandler),
            typeof(Highlight));

        public static void AddAfterSelectionHighlightBrushChangedHandler(DependencyObject d, RoutedEventHandler handler)
        {
            UIElement uie = d as UIElement;
            if (uie != null)
            {
                uie.AddHandler(AfterSelectionHighlightBrushChangedEvent, handler);
            }
        }
        public static void RemoveAfterSelectionHighlightBrushChangedHandler(DependencyObject d, RoutedEventHandler handler)
        {
            UIElement uie = d as UIElement;
            if (uie != null)
            {
                uie.RemoveHandler(AfterSelectionHighlightBrushChangedEvent, handler);
            }
        }

        static void RaiseAfterSelectionHighlightBrushChanged(UIElement uiElement, Brush newSelectionHighlightBrush)
        {
            if (uiElement == null)
                return;

            RoutedEventArgs newEventArgs = new RoutedEventArgs(AfterSelectionHighlightBrushChangedEvent);
            uiElement.RaiseEvent(newEventArgs);
        }

        #endregion


        #region Hover Highlight Brush

        public static Brush GetHoverHighlightBrush(DependencyObject obj)
        {
            return (Brush)obj.GetValue(HoverHighlightBrushProperty);
        }

        public static void SetHoverHighlightBrush(DependencyObject obj, Brush value)
        {
            obj.SetValue(HoverHighlightBrushProperty, value);
        }

        public static readonly DependencyProperty HoverHighlightBrushProperty =
            DependencyProperty.RegisterAttached(
            "HoverHighlightBrush",
            typeof(Brush),
            typeof(Highlight),
            new FrameworkPropertyMetadata(null,
                FrameworkPropertyMetadataOptions.Inherits,
                AfterHoverHighlightBrushChanged));

        static void AfterHoverHighlightBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            RaiseAfterHoverHighlightBrushChanged(d as UIElement, (Brush)e.NewValue);
        }

        #endregion

        #region After HoverHighlight Brush Changed

        public static readonly RoutedEvent AfterHoverHighlightBrushChangedEvent =
            EventManager.RegisterRoutedEvent(
            "AfterHoverHighlightBrushChanged",
            RoutingStrategy.Bubble,
            typeof(RoutedEventHandler),
            typeof(Highlight));

        public static void AddAfterHoverHighlightBrushChangedHandler(DependencyObject d, RoutedEventHandler handler)
        
		{

		// todo: check if this and d have common ancestor?
		// if not, then this may be inside popup?

            UIElement uie = d as UIElement;
            if (uie != null)
            {
                uie.AddHandler(AfterHoverHighlightBrushChangedEvent, handler);
            }
        }
        public static void RemoveAfterHoverHighlightBrushChangedHandler(DependencyObject d, RoutedEventHandler handler)
        {
            UIElement uie = d as UIElement;
            if (uie != null)
            {
                uie.RemoveHandler(AfterHoverHighlightBrushChangedEvent, handler);
            }
        }

        static void RaiseAfterHoverHighlightBrushChanged(UIElement uiElement, Brush newHoverHighlightBrush)
        {
            if (uiElement == null)
                return;

            RoutedEventArgs newEventArgs = new RoutedEventArgs(AfterHoverHighlightBrushChangedEvent);
            uiElement.RaiseEvent(newEventArgs);
        }

        #endregion

        #region Foreground Original Value

        static object GetForegroundOriginalValue(DependencyObject obj)
        {
            return (object)obj.GetValue(ForegroundOriginalValueProperty);
        }

        static void SetForegroundOriginalValue(DependencyObject obj, object value)
        {
            obj.SetValue(ForegroundOriginalValueProperty, value);
        }

        static readonly DependencyProperty ForegroundOriginalValueProperty =
            DependencyProperty.RegisterAttached(
            "ForegroundOriginalValue", 
            typeof(object), 
            typeof(Highlight), 
            new PropertyMetadata(null));

        #endregion

        #region Foreground Modified Value

        static object GetForegroundModifiedValue(DependencyObject obj)
        {
            return (object)obj.GetValue(ForegroundModifiedValueProperty);
        }

        static void SetForegroundModifiedValue(DependencyObject obj, object value)
        {
            obj.SetValue(ForegroundModifiedValueProperty, value);
        }

        static readonly DependencyProperty ForegroundModifiedValueProperty =
            DependencyProperty.RegisterAttached(
            "ForegroundModifiedValue", 
            typeof(object),
            typeof(Highlight), 
            new PropertyMetadata(null));

        #endregion


        #region Text Foreground Responds To Selection (Text Block)

        public static bool GetTextForegroundRespondsToSelection(TextBlock obj)
        {
            return (bool)obj.GetValue(TextForegroundRespondsToSelectionProperty);
        }

        public static void SetTextForegroundRespondsToSelection(TextBlock obj, bool value)
        {
            obj.SetValue(TextForegroundRespondsToSelectionProperty, value);
        }

        public static readonly DependencyProperty TextForegroundRespondsToSelectionProperty =
            DependencyProperty.RegisterAttached(
            "TextForegroundRespondsToSelection",
            typeof(bool),
            typeof(Highlight),
            new PropertyMetadata(false, OnTextForegroundRespondsToSelectionChanged));

        static void OnTextForegroundRespondsToSelectionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var tb = d as TextBlock;
          
            AddAfterHoverHighlightBrushChangedHandler(d, new RoutedEventHandler((_s, _e) =>
                {
                    RefreshForegruond(tb);
                }));

            AddAfterSelectionHighlightBrushChangedHandler(d, new RoutedEventHandler((_s, _e) =>
                {
                    RefreshForegruond(tb);
                }));
        }

        static void RefreshForegruond(TextBlock tb)
        {
            var selectionHighlightBrush = GetSelectionHighlightBrush(tb) as SolidColorBrush;
            var hoverHighlightBrush = GetHoverHighlightBrush(tb) as SolidColorBrush;

            if (selectionHighlightBrush != null || hoverHighlightBrush != null)
            {
                var foreground_originalValue = GetForegroundOriginalValue(tb);
                var foreground_modifiedValue = GetForegroundModifiedValue(tb);

                var highlight_brush = selectionHighlightBrush;

                if (highlight_brush == null)
                    highlight_brush = hoverHighlightBrush;

                if(highlight_brush == null)
                {
                    // todo: restore original foreground

                    SetSelectionHighlightBrush(tb, null);
                    SetHoverHighlightBrush(tb, null);
                    SetForegroundModifiedValue(tb, null);
                    SetForegroundOriginalValue(tb, null);

                    return;
                }

                var highlight_color = highlight_brush.Color;

                var foreground_brush = tb.Foreground as SolidColorBrush;

                if(foreground_originalValue != null)
                {
                    foreground_brush = foreground_originalValue as SolidColorBrush;
                }

                if (foreground_brush == null)
                {
                    // todo: cleanup
                    // todo: restore original foreground
                    return;
                }

                var foreground_color = foreground_brush.Color;

                var highlightScRGB = highlight_color.ToScRGBColor();
                var foregroundScRGB = foreground_color.ToScRGBColor();

                var highlightXYZ = KnownColorSpaces.scRGB.ToXYZColor(highlightScRGB);
                var foregroundXYZ = KnownColorSpaces.scRGB.ToXYZColor(foregroundScRGB);

                var highlightLab = (LabColor) KnownColorSpaces.Lab.FromXYZColor(highlightXYZ);
                var foregroundLab = (LabColor)KnownColorSpaces.Lab.FromXYZColor(foregroundXYZ);

                var newForegroundLab = (LabColor) null;

                if(highlightLab.L > 50 && foregroundLab.L > 50)
                {
                    newForegroundLab = new LabColor(foregroundLab.Alpha, 5, foregroundLab.a, foregroundLab.b);
                }
                else if (highlightLab.L < 50 && foregroundLab.L < 50)
                {
                    newForegroundLab = new LabColor(foregroundLab.Alpha, 95, foregroundLab.a, foregroundLab.b);
                }

                if (newForegroundLab == null)
                    return;

                if (foreground_originalValue == null)
                {
                    var binding = BindingOperations.GetBinding(tb, TextBlock.ForegroundProperty);

                    if (binding != null)
                        SetForegroundOriginalValue(tb, binding);
                    else
                        SetForegroundOriginalValue(tb, tb.Foreground);
                }

                var fgBrush = new SolidColorBrush(newForegroundLab.ToWindowsMediaColor());
                fgBrush.Freeze();

                SetForegroundModifiedValue(tb, fgBrush);

                tb.Foreground = fgBrush;
            }
            else
            {
                var originalValue = GetForegroundOriginalValue(tb);

                if (originalValue == null)
                    return;

                if(originalValue is Binding)
                {
                    BindingOperations.SetBinding(tb, TextBlock.ForegroundProperty, originalValue as Binding);
                }
                else if(originalValue != null && object.Equals(GetForegroundModifiedValue(tb), tb.Foreground))
                {
                    tb.SetValue(TextBlock.ForegroundProperty, originalValue);
                }

                SetForegroundModifiedValue(tb, null);
                SetForegroundOriginalValue(tb, null);
            }
            
        }

        #endregion


    }
    
    
     <Style x:Key="Styles.TextBlock"
           TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource {x:Type TextBlock}}">

        <Setter Property="local:Highlight.TextForegroundRespondsToSelection" Value="true" />
        
        lvi
        
        <Setter Property="local:Highlight.HoverHighlightBrush" Value="{DynamicResource Brushes.ListItem.Hover.Background}" />
        
        <Setter Property="local:Highlight.SelectionHighlightBrush" Value="{DynamicResource Brushes.ListItem.Selected-Inactive.Background}" />
        
        
        <Setter Property="local:Highlight.SelectionHighlightBrush" Value="{DynamicResource Brushes.ListItem.Selected.Background}" />
        
 if (alpha == 0)
                return;

            if (!IntersectsWith(destination_rect))
                return;

            int dw = (int)destRect.Width;
            int dh = (int)destRect.Height;

            //using (var srcContext = source.GetBitmapContext(ReadWriteMode.ReadOnly))
            {
               // using (var destContext = bmp.GetBitmapContext())
                {
                    // tinted if color is not opaque white
                    var is_tinted = alpha != 255 || red != 255 || green != 255 || blue != 255;

                    int sourceWidth = srcContext.Width;
                    int dpw = destContext.Width;
                    int dph = destContext.Height;

                    var sourcePixels = srcContext.Pixels;
                    var destPixels = destContext.Pixels;
                    int sourceLength = srcContext.Length;
                    int destLength = destContext.Length;
                    int sourceIdx = -1;
                    int px = (int)destRect.X;
                    int py = (int)destRect.Y;
                    int right = px + dw;
                    int bottom = py + dh;
                    int x;
                    int y;
                    int idx;
                    double ii;
                    double jj;
                    int sr = 0;
                    int sg = 0;
                    int sb = 0;
                    int dr, dg, db;
                    int sourcePixel;
                    int sa = 0;
                    int da;
                    int ca = color.A;
                    int cr = color.R;
                    int cg = color.G;
                    int cb = color.B;
                    var sw = (int)sourceRect.Width;
                    var sdx = sourceRect.Width / destRect.Width;
                    var sdy = sourceRect.Height / destRect.Height;
                    int sourceStartX = (int)sourceRect.X;
                    int sourceStartY = (int)sourceRect.Y;
                    int lastii, lastjj;
                    lastii = -1;
                    lastjj = -1;
                    jj = sourceStartY;
                    y = py;
                    for (int j = 0; j < dh; j++)
                    {
                        if (y >= 0 && y < dph)
                        {
                            ii = sourceStartX;
                            idx = px + y * dpw;
                            x = px;
                            sourcePixel = sourcePixels[0];


                            if (blendMode == BlendMode.None && !is_tinted)
                            {
                                sourceIdx = (int)ii + (int)jj * sourceWidth;
                                var offset = x < 0 ? -x : 0;
                                var xx = x + offset;
                                var wx = sourceWidth - offset;
                                var len = xx + wx < dpw ? wx : dpw - xx;
                                if (len > sw) len = sw;
                                if (len > dw) len = dw;
                                BitmapContext.BlockCopy(srcContext, (sourceIdx + offset) * 4, destContext, (idx + offset) * 4, len * 4);
                            }

                            // Pixel by pixel copying
                            else
                            {
                                for (int i = 0; i < dw; i++)
                                {
                                    if (x >= 0 && x < dpw)
                                    {
                                        if ((int)ii != lastii || (int)jj != lastjj)
                                        {
                                            sourceIdx = (int)ii + (int)jj * sourceWidth;
                                            if (sourceIdx >= 0 && sourceIdx < sourceLength)
                                            {
                                                sourcePixel = sourcePixels[sourceIdx];
                                                sa = ((sourcePixel >> 24) & 0xff);
                                                sr = ((sourcePixel >> 16) & 0xff);
                                                sg = ((sourcePixel >> 8) & 0xff);
                                                sb = ((sourcePixel) & 0xff);
                                                if (tinted && sa != 0)
                                                {
                                                    sa = (((sa * ca) * 0x8081) >> 23);
                                                    sr = ((((((sr * cr) * 0x8081) >> 23) * ca) * 0x8081) >> 23);
                                                    sg = ((((((sg * cg) * 0x8081) >> 23) * ca) * 0x8081) >> 23);
                                                    sb = ((((((sb * cb) * 0x8081) >> 23) * ca) * 0x8081) >> 23);
                                                    sourcePixel = (sa << 24) | (sr << 16) | (sg << 8) | sb;
                                                }
                                            }
                                            else
                                            {
                                                sa = 0;
                                            }
                                        }
                                        if (blendMode == BlendMode.None)
                                        {
                                            destPixels[idx] = sourcePixel;
                                        }
                                        else if (blendMode == BlendMode.ColorKeying)
                                        {
                                            sr = ((sourcePixel >> 16) & 0xff);
                                            sg = ((sourcePixel >> 8) & 0xff);
                                            sb = ((sourcePixel) & 0xff);

                                            if (sr != color.R || sg != color.G || sb != color.B)
                                            {
                                                destPixels[idx] = sourcePixel;
                                            }

                                        }
                                        else if (blendMode == BlendMode.Mask)
                                        {
                                            int destPixel = destPixels[idx];
                                            da = ((destPixel >> 24) & 0xff);
                                            dr = ((destPixel >> 16) & 0xff);
                                            dg = ((destPixel >> 8) & 0xff);
                                            db = ((destPixel) & 0xff);
                                            destPixel = ((((da * sa) * 0x8081) >> 23) << 24) |
                                                        ((((dr * sa) * 0x8081) >> 23) << 16) |
                                                        ((((dg * sa) * 0x8081) >> 23) << 8) |
                                                        ((((db * sa) * 0x8081) >> 23));
                                            destPixels[idx] = destPixel;
                                        }
                                        else if (sa > 0)
                                        {
                                            int destPixel = destPixels[idx];
                                            da = ((destPixel >> 24) & 0xff);
                                            if ((sa == 255 || da == 0) &&
                                               blendMode != BlendMode.Additive
                                               && blendMode != BlendMode.Subtractive
                                               && blendMode != BlendMode.Multiply
                                               )
                                            {
                                                destPixels[idx] = sourcePixel;
                                            }
                                            else
                                            {
                                                dr = ((destPixel >> 16) & 0xff);
                                                dg = ((destPixel >> 8) & 0xff);
                                                db = ((destPixel) & 0xff);
                                                if (blendMode == BlendMode.Alpha)
                                                {
                                                    var isa = 255 - sa;

                                                    destPixel = ((da & 0xff) << 24) |
                                                                (((((sr << 8) + isa * dr) >> 8) & 0xff) << 16) |
                                                                (((((sg << 8) + isa * dg) >> 8) & 0xff) << 8) |
                                                                 ((((sb << 8) + isa * db) >> 8) & 0xff);
                                                }
                                                else if (blendMode == BlendMode.Additive)
                                                {
                                                    int a = (255 <= sa + da) ? 255 : (sa + da);
                                                    destPixel = (a << 24) |
                                                       (((a <= sr + dr) ? a : (sr + dr)) << 16) |
                                                       (((a <= sg + dg) ? a : (sg + dg)) << 8) |
                                                       (((a <= sb + db) ? a : (sb + db)));
                                                }
                                                else if (blendMode == BlendMode.Subtractive)
                                                {
                                                    int a = da;
                                                    destPixel = (a << 24) |
                                                       (((sr >= dr) ? 0 : (sr - dr)) << 16) |
                                                       (((sg >= dg) ? 0 : (sg - dg)) << 8) |
                                                       (((sb >= db) ? 0 : (sb - db)));
                                                }
                                                else if (blendMode == BlendMode.Multiply)
                                                {
                                                    // Faster than a division like (s * d) / 255 are 2 shifts and 2 adds
                                                    int ta = (sa * da) + 128;
                                                    int tr = (sr * dr) + 128;
                                                    int tg = (sg * dg) + 128;
                                                    int tb = (sb * db) + 128;

                                                    int ba = ((ta >> 8) + ta) >> 8;
                                                    int br = ((tr >> 8) + tr) >> 8;
                                                    int bg = ((tg >> 8) + tg) >> 8;
                                                    int bb = ((tb >> 8) + tb) >> 8;

                                                    destPixel = (ba << 24) |
                                                                ((ba <= br ? ba : br) << 16) |
                                                                ((ba <= bg ? ba : bg) << 8) |
                                                                ((ba <= bb ? ba : bb));
                                                }

                                                destPixels[idx] = destPixel;
                                            }
                                        }
                                    }
                                    x++;
                                    idx++;
                                    ii += sdx;
                                }
                            }
                        }
                        jj += sdy;
                        y++;
                    }
                }
            }
        }            
