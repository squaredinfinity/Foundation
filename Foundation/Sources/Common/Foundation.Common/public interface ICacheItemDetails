Enter file contents hepublic interface ICacheItemDetails
    {
        DateTime TimeLastUpdatedUtc { get; }
        DateTime TimeToExpireUtc { get; }

        bool TryChangeTimeToExpire(DateTime newTimeToExpireUtc);
    }

public class AsyncCacheItemDetails<T> : ICacheItemDetails<T>
    {
        readonly Task<T> ItemFactoryTask;
        public T Value 
        {
            get { return ItemFactoryTask.Result; }
        }
        public DateTime TimeAddedToCacheUtc { get; set; }

        public AsyncCacheItemDetails(Func<T> itemFactory)
        {
            ItemFactoryTask = new Task<T>(itemFactory);
            ItemFactoryTask.Start();
        }
    }

public class CacheGroup : ICacheService
    {
        readonly ICacheService Owner;
        
        public bool IsTransient { get; private set; }

        readonly string GroupName;

        public CacheGroup(ICacheService owner)
            : this(owner, Guid.NewGuid().ToString())
        {
            IsTransient = true;
        }

        public CacheGroup(ICacheService owner, string groupName)
        {
            this.Owner = owner;
            this.GroupName = groupName + ".";

            _isCacheEnabled = true;
        }

        bool _isCacheEnabled;
        public bool IsCacheEnabled
        {
            get
            {
                if (!Owner.IsCacheEnabled)
                    return false;

                return _isCacheEnabled;
            }
            set
            {
                _isCacheEnabled = value;
            }
        }

        public void Remove(string key)
        {
            Owner.Remove(GroupName + key);
        }

        public T GetOrAdd<T>(string key, Func<T> valueFactory)
        {
            return Owner.GetOrAdd(GroupName + key, valueFactory);
        }
        
        public T GetOrAdd<T>(string key, Func<T> valueFactory, DateTimeOffset absoluteExpiration)
        {
            return Owner.GetOrAdd<T>(GroupName + key, valueFactory, absoluteExpiration);
        }

        public T GetOrAdd<T>(string key, Func<T> valueFactory, TimeSpan slidingExpiration)
        {
            return Owner.GetOrAdd<T>(GroupName + key, valueFactory, slidingExpiration);
        }

        public T GetOrAdd<T>(string key, Func<T> valueFactory, Predicate<ICacheItemDetails<T>> shouldForceCacheExpiration)
        {
            return Owner.GetOrAdd<T>(GroupName + key, valueFactory, shouldForceCacheExpiration);
        }

        public T GetOrAdd<T>(string key, Func<T> valueFactory, TimeSpan slidingExpiration, Predicate<ICacheItemDetails<T>> shouldForceCacheExpiration)
        {
            return Owner.GetOrAdd<T>(GroupName + key, valueFactory, slidingExpiration, shouldForceCacheExpiration);
        }

        public T GetOrAdd<T>(string key, Func<T> valueFactory, DateTimeOffset absoluteExpiration, Predicate<ICacheItemDetails<T>> shouldForceCacheExpiration)
        {
            return Owner.GetOrAdd<T>(GroupName + key, valueFactory, absoluteExpiration, shouldForceCacheExpiration);
        }
        
        public void ClearAll()
        {
            Owner.ClearAll();
        }

        public ICacheService NewTransientCacheGroup()
        {
            return new CacheGroup(this);
        }

        public ICacheService NewCacheGroup(string groupName)
        {
            return new CacheGroup(this, groupName);
        }
    }


    #region Command

        public static void SetCommand(System.Windows.Controls.ItemsControl element, ICommand value)
        {
            element.SetValue(CommandProperty, value);
        }

        public static ICommand GetCommand(System.Windows.Controls.ItemsControl element)
        {
            return (ICommand)element.GetValue(CommandProperty);
        }

        public static readonly DependencyProperty CommandProperty =
            DependencyProperty.RegisterAttached(
            "Command",
            typeof(ICommand),
            typeof(FocusedItemChanged),
            new PropertyMetadata(null, OnCommandChanged));

        static void OnCommandChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var c = d as UIElement;

            if (c == null)
                return;

            var tv = c as System.Windows.Controls.TreeView;
            if (tv != null)
            {
                if ((ICommand)e.NewValue != null)
                {
                    tv.SelectedItemChanged -= tv_SelectedItemChanged;
                    tv.SelectedItemChanged += tv_SelectedItemChanged;

                    tv.GotFocus -= OnGotFocus;
                    tv.GotFocus += OnGotFocus;
                }
                else
                {
                    tv.SelectedItemChanged -= tv_SelectedItemChanged;
                    tv.GotFocus -= OnGotFocus;
                }

                return;
            }

            var selector = c as System.Windows.Controls.Primitives.Selector;
            if(selector != null)
            {
                if ((ICommand)e.NewValue != null)
                {
                    selector.SelectionChanged -= selector_SelectionChanged;
                    selector.SelectionChanged += selector_SelectionChanged;

                    selector.GotFocus -= OnGotFocus;
                    selector.GotFocus += OnGotFocus;
                }
                else
                {
                    selector.SelectionChanged -= selector_SelectionChanged;
                    selector.GotFocus -= OnGotFocus;
                }

                return;
            }
        }

        static void OnGotFocus(object sender, RoutedEventArgs e)
        {
            var tv = sender as System.Windows.Controls.TreeView;
            if (tv != null)
            {
                var command = GetCommand(tv);

                if (command != null && command.CanExecute(tv.SelectedItem))
                {
                    command.Execute(tv.SelectedItem);
                }

                return;
            }

            var selector = sender as System.Windows.Controls.Primitives.Selector;
            if(selector != null)
            {
                var command = GetCommand(selector);

                if (command != null && command.CanExecute(selector.SelectedItem))
                {
                    command.Execute(selector.SelectedItem);
                }

                return;
            }
        }

        static void selector_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            var selector = sender as System.Windows.Controls.Primitives.Selector;

            if (selector == null)
                return;

            var command = GetCommand(selector);

            if (command != null && command.CanExecute(selector.SelectedItem))
            {
                command.Execute(selector.SelectedItem);
            }
        }

        static void tv_SelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
        {
            var tv = sender as System.Windows.Controls.TreeView;

            if (tv == null)
                return;

            var command = GetCommand(tv);

            if (command != null && command.CanExecute(tv.SelectedItem))
            {
                command.Execute(tv.SelectedItem);
            }
        }


        #endregionre
