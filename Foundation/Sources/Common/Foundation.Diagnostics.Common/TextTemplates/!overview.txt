Text Templates provides simple text templating mechanism

For example it can trasform input string "{DateTime.Now:yyyy-MM-dd}" to "2013-11-18"


var template = "Hi {Name}! Today is {DateTime.Now=>.format(yyyy-MM-dd)}".ToTextTemplate();

context
	.Variables

	=> pass previous to next
	?=> process next if previous is true
	.x(y,z) function x with parameters y and z

1. find placeholders
2. find predicates
3. split processing instructions
4. done

{number:0.00}

{?number.abs().format(0.00).addBrackets()}
{?number:abs():format(0.00):addBrackets()}

{?number|abs()|format(0.00)|addBrackets()}

{?number=>abs()=>format(0.00)=>addBrackets()}

{?number->abs()->format(0.00)->addBrackets()}


{?number:abs():format(0.00):addBrackets()}


{?number=>abs()=>format(0.00)=>addBrackets()}

{?HasAttachedObjects?=>}


var tps = new TemplateProcessingService();
tps.Substitutions.Add("{Name}", "Jarek");
tps.Substitutions.Add("{DateTime.Now}", (cx)=> DateTime.Now);
tps.Predicates.Add("HasAttachedObjects", (cx) => cx.GetVariable<int>("input").HasAttachedObjects)
tps.Functions.Add(".format") => (cx, input, parameters) => input.Format(parameters.First());

var variables = new Dictionary<string, object>();
variables.Add("input", stuff)
var result = tps.ProcessTemplate(template, variables);


Template.FromText(xxx) => Template
Template
	.Placeholders
		Placeholder - location, length, so it can be quickly replaced (no need to re-parse it)

Placeholder
	- stores what to replace
	- stores processing instructions
	cx.Variables[xxx] (static)
	cx.Substitutions[xxx].Evaluate(xxx) (dynamically evaluated)

Context
	Variables - list of global variables which can be used for quick substitution
				a dictionary <string, object> for quick lookups
	Substitutions

Substitution -> rules for placeholder replacements
	TextSubstitution -> simply replace with text
	LazySubstitutaion -> evaluate on each request (call function)

ProcessingIntruction
	- process(original value, input, parameters[]) : obj





