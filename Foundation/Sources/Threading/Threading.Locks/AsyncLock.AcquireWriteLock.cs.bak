using SquaredInfinity.Disposables;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using SquaredInfinity.Extensions;

namespace SquaredInfinity.Threading.Locks
{
    public partial class AsyncLock
    {
        public ILockAcquisition AcquireWriteLock() => AcquireWriteLock(SyncOptions.Default);
        public ILockAcquisition AcquireWriteLock(SyncOptions options) => AcquireLock(LockType.Write, options);

        public async Task<ILockAcquisition> AcquireWriteLockAsync()
        {
            var ao = AsyncOptions.Default;

            return
                await
                AcquireWriteLockAsync(ao)
                .ConfigureAwait(ao.ContinueOnCapturedContext);
        }

        public async Task<ILockAcquisition> AcquireWriteLockAsync(AsyncOptions options)
        {
            if (IsLockAcquisitionRecursive())
                return new _DummyLockAcquisition();

            // lock parent first
            var ok =
                await
                InternalWriteLock
                .WaitAsync(options.MillisecondsTimeout, options.CancellationToken)
                .ConfigureAwait(options.ContinueOnCapturedContext);

            if (!ok)
                return new _FailedLockAcquisition();

            _writeOwnerThreadId = System.Environment.CurrentManagedThreadId;

            var dispose_when_done = new CompositeDisposable();

            try
            {
                // then its children
                if (CompositeLock != null)
                {
                    var children_acquisition =
                        await
                        CompositeLock.LockChildrenAsync(LockType.Write, options)
						.ConfigureAwait(options.ContinueOnCapturedContext);

                    if (!children_acquisition.IsLockHeld)
                    {
                        children_acquisition.Dispose();

                        // couldn't acquire children, release parent lock
                        InternalWriteLock.Release();

                        return new _FailedLockAcquisition();
                    }

                    dispose_when_done.Add(children_acquisition);
                }
            }
            catch
            {
                // some error occured, release parent lock
                InternalWriteLock.Release();

                throw;
            }

            return new _WriteLockAcquisition(owner: this, disposeWhenDone: dispose_when_done);

        }

        #region Acquire Write Lock (Static)

        public static async Task<ILockAcquisition> AcquireWriteLockAsync(params IAsyncLock[] locks)
        {
            var ao = AsyncOptions.Default;

            return await AcquireWriteLockAsync(ao, locks);
        }

        public static async Task<ILockAcquisition> AcquireWriteLockAsync(AsyncOptions options, params IAsyncLock[] locks)
        {
            if (locks == null || locks.Length == 0)
                return _FailedLockAcquisition.Instance;

            var all_acquisitions =
                await
                Task.WhenAll<ILockAcquisition>(locks.Select(x => x.AcquireWriteLockAsync(options)))
                .ConfigureAwait(options.ContinueOnCapturedContext);

            return new _CompositeLockAcqusition(all_acquisitions);
        }

        #endregion
    }
}
