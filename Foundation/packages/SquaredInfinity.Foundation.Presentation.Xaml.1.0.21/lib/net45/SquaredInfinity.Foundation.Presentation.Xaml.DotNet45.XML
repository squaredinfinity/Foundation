<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SquaredInfinity.Foundation.Presentation.Xaml.DotNet45</name>
    </assembly>
    <members>
        <member name="F:SquaredInfinity.Foundation.Presentation.Behaviors.DragDrop.IsDragSourceProperty">
            <summary>
            True if UIElement can act as Drag Source
            </summary>
        </member>
        <member name="F:SquaredInfinity.Foundation.Presentation.Behaviors.DragDrop.IsDropTargetProperty">
            <summary>
            True if UI element can be a drop target
            </summary>
        </member>
        <member name="F:SquaredInfinity.Foundation.Presentation.Behaviors.DragDrop.DragMouseAnchorPointProperty">
            <summary>
            DragMouseAnchorPoint defines the horizontal and vertical proportion at which the pointer will anchor on the DragAdorner.
            </summary>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Behaviors.DragDrop.GetDragSource(SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo,System.Windows.UIElement)">
            <summary>
            Finds a Drag Source
            </summary>
            <param name="dragInfo"></param>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="F:SquaredInfinity.Foundation.Presentation.Behaviors.Highlight.SelectionHighlightBrushProperty">
            <summary>
            Brush used as a background for selection highlight
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:SquaredInfinity.Foundation.Presentation.Behaviors.Highlight.HoverHighlightBrushProperty">
            <summary>
            Brush used for hover highlight background
            </summary>
        </member>
        <member name="T:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand">
            <summary>
            An <see cref="!:ICommand"/> whose delegates do not take any parameters for <see cref="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand.Execute"/> and <see cref="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand.CanExecute"/>.
            </summary>
            <seealso cref="T:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase"/>
            <seealso cref="T:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand`1"/>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase.RaiseCanExecuteChanged">
            <summary>
            Raises <see cref="E:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase.CanExecuteChanged"/> on the UI thread so every command invoker
            can requery to check if the command can execute.
            <remarks>Note that this will trigger the execution of <see cref="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase.CanExecute(System.Object)"/> once for each invoker.</remarks>
            </summary>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase.OnIsActiveChanged">
            <summary>
            This raises the <see cref="E:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase.IsActiveChanged"/> event.
            </summary>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase.Execute(System.Object)">
            <summary>
            Executes the command with the provided parameter by invoking the <see cref="T:System.Action`1"/> supplied during construction.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase.CanExecute(System.Object)">
            <summary>
            Determines if the command can execute with the provided parameter by invoing the <see cref="T:System.Func`2"/> supplied during construction.
            </summary>
            <param name="parameter">The parameter to use when determining if this command can execute.</param>
            <returns>Returns <see langword="true"/> if the command can execute.  <see langword="False"/> otherwise.</returns>
        </member>
        <member name="E:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase.IsActiveChanged">
            <summary>
            Fired if the <see cref="P:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase.IsActive"/> property changes.
            </summary>
        </member>
        <member name="E:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute. You must keep a hard
            reference to the handler to avoid garbage collection and unexpected results. See remarks for more information.
            </summary>
            <remarks>
            When subscribing to the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event using 
            code (not when binding using XAML) will need to keep a hard reference to the event handler. This is to prevent 
            garbage collection of the event handler because the command implements the Weak Event pattern so it does not have
            a hard reference to this handler. An example implementation can be seen in the CompositeCommand and CommandBehaviorBase
            classes. In most scenarios, there is no reason to sign up to the CanExecuteChanged event directly, but if you do, you
            are responsible for maintaining the reference.
            </remarks>
            <example>
            The following code holds a reference to the event handler. The myEventHandlerReference value should be stored
            in an instance member to avoid it from being garbage collected.
            <code>
            EventHandler myEventHandlerReference = new EventHandler(this.OnCanExecuteChanged);
            command.CanExecuteChanged += myEventHandlerReference;
            </code>
            </example>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase.WeakEventHandlerManager.CallWeakReferenceHandlers(System.Object,System.Collections.Generic.List{System.WeakReference})">
            <summary>
             Invokes the handlers 
            </summary>
            <param name="sender"></param>
            <param name="handlers"></param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase.WeakEventHandlerManager.AddWeakReferenceHandler(System.Collections.Generic.List{System.WeakReference}@,System.EventHandler,System.Int32)">
            <summary>
             Adds a handler to the supplied list in a weak way.
            </summary>
            <param name="handlers">Existing handler list.  It will be created if null.</param>
            <param name="handler">Handler to add.</param>
            <param name="defaultListSize">Default list size.</param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase.WeakEventHandlerManager.RemoveWeakReferenceHandler(System.Collections.Generic.List{System.WeakReference},System.EventHandler)">
            <summary>
             Removes an event handler from the reference list.
            </summary>
            <param name="handlers">Handler list to remove reference from.</param>
            <param name="handler">Handler to remove.</param>
        </member>
        <member name="T:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommandBase.WeakEventHandlerManager.DispatcherProxy">
            <summary>
            Hides the dispatcher mis-match between Silverlight and .Net, largely so code reads a bit easier
            </summary>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand.#ctor(System.Action)">
            <summary>
            Creates a new instance of <see cref="T:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand"/> with the <see cref="T:System.Action"/> to invoke on execution.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Action"/> to invoke when <see cref="!:ICommand.Execute"/> is called.</param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Creates a new instance of <see cref="T:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand"/> with the <see cref="T:System.Action"/> to invoke on execution
            and a <see langword="Func"/> to query for determining if the command can execute.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Action"/> to invoke when <see cref="!:ICommand.Execute"/> is called.</param>
            <param name="canExecuteMethod">The <see cref="T:System.Func`1"/> to invoke when <see cref="!:ICommand.CanExecute"/> is called</param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand.Execute">
            <summary>
             Executes the command.
            </summary>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand.CanExecute">
            <summary>
            Determines if the command can be executed.
            </summary>
            <returns>Returns <see langword="true"/> if the command can execute,otherwise returns <see langword="false"/>.</returns>
        </member>
        <member name="T:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand`1">
            <summary>
            An <see cref="!:ICommand"/> whose delegates can be attached for <see cref="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand`1.Execute(`0)"/> and <see cref="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand`1.CanExecute(`0)"/>.
            It also implements the <see cref="!:IActiveAware"/> interface, which is useful when registering this command in a <see cref="!:CompositeCommand"/> that monitors command's activity.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <remarks>
            The constructor deliberately prevent the use of value types.
            Because ICommand takes an object, having a value type for T would cause unexpected behavior when CanExecute(null) is called during XAML initialization for command bindings.
            Using default(T) was considered and rejected as a solution because the implementor would not be able to distinguish between a valid and defaulted values.
            <para/>
            Instead, callers should support a value type by using a nullable value type and checking the HasValue property before using the Value property.
            <example>
                <code>
            public MyClass()
            {
                this.submitCommand = new DelegateCommand&lt;int?&gt;(this.Submit, this.CanSubmit);
            }
            
            private bool CanSubmit(int? customerId)
            {
                return (customerId.HasValue &amp;&amp; customers.Contains(customerId.Value));
            }
                </code>
            </example>
            </remarks>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of <see cref="T:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command.  This can be null to just hook up a CanExecute delegate.</param>
            <remarks><seealso cref="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand`1.CanExecute(`0)"/> will always return true.</remarks>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command.  This can be null to just hook up a CanExecute delegate.</param>
            <param name="canExecuteMethod">Delegate to execute when CanExecute is called on the command.  This can be null.</param>
            <exception cref="T:System.ArgumentNullException">When both <paramref name="executeMethod"/> and <paramref name="canExecuteMethod"/> ar <see langword="null"/>.</exception>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand`1.CanExecute(`0)">
            <summary>
            Determines if the command can execute by invoked the <see cref="T:System.Func`2"/> provided during construction.
            </summary>
            <param name="parameter">Data used by the command to determine if it can execute.</param>
            <returns>
            <see langword="true"/> if this command can be executed; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Commands.DelegateCommand`1.Execute(`0)">
            <summary>
            Executes the command and invokes the <see cref="T:System.Action`1"/> provided during construction.
            </summary>
            <param name="parameter">Data used by the command.</param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Controls.TabControl.ItemContainerGenerator_StatusChanged(System.Object,System.EventArgs)">
            <summary>
            If containers are done, generate the selected item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Controls.TabControl.OnApplyTemplate">
            <summary>
            Get the ItemsHolder and generate any children
            </summary>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Controls.TabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            When the items change we remove any generated panel children and add any new ones as necessary
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SquaredInfinity.Foundation.Presentation.DragDrop.IDropTarget">
            <summary>
            Interface implemented by Drop Handlers.
            </summary>
        </member>
        <member name="T:SquaredInfinity.Foundation.Presentation.DragDrop.IDragSource">
            <summary>
            Interface implemented by Drag Handlers.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SquaredInfinity.Foundation.Presentation.DragDrop.IDragSource.StartDrag(SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo)" -->
        <member name="T:SquaredInfinity.Foundation.Presentation.Converters.ComObjectConverter">
            <summary>
            Not sure if this is safe to use, may be better to map ComObject to custom type first just to be safe.
            </summary>
        </member>
        <member name="T:SquaredInfinity.Foundation.Presentation.Converters.CompositeConverter">
            <summary>
            Performs conversion using a chain of converters, where original value is passed to first converter
            and every next converter gets passed a result of previous conversion.
            </summary>
        </member>
        <member name="T:SquaredInfinity.Foundation.Presentation.Converters.FirstBindingConverter">
            <summary>
            Returns value of a first binding (out of possibly many specified for this Multi Value Converter).
            Useful in cases when first binding carries actual information and other bindings are used only to monitor changes.
            </summary>
        </member>
        <member name="T:SquaredInfinity.Foundation.Presentation.Converters.MixedCompositeConverter">
            <summary>
            Performs conversion using a chain of converters, where original value is passed to first converter
            and every next converter gets passed a result of previous conversion.
            First Converter must always be a MultiValueConverter.
            Subsequent Converters must always be IValueConverters.
            </summary>
        </member>
        <member name="F:SquaredInfinity.Foundation.Presentation.Converters.MixedCompositeConverter.Converters">
            <summary>
            Contains one IMultiValueConverter (first) followed by one or more IValueConverters
            </summary>
        </member>
        <member name="T:SquaredInfinity.Foundation.Presentation.DataTemplateSelectors.IContextAwareDataTemplateProvider">
            <summary>
            Provides a logic for selecting Data Type for given item when placed in an application in given context.
            Context is provided by the host application (e.g. SearchResults, RecentItems etc.) and can be used by Type Data Template Selector
            to choose specific template to be used.
            </summary>
        </member>
        <member name="T:SquaredInfinity.Foundation.Presentation.DragDrop.DefaultDropTarget">
            <summary>
            Default Drop Target.
            Handles Most basic cases.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo.Data">
            <summary>
            Gets or sets the drag data.
            </summary>
            
            <remarks>
            This must be set by a drag handler in order for a drag to start.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo.DragStartPosition">
            <summary>
            Gets the position of the click that initiated the drag, relative to <see cref="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo.VisualSource"/>.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo.PositionInDraggedItem">
            <summary>
            Gets the point where the cursor was relative to the item being dragged when the drag was started.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo.MouseButton">
            <summary>
            Gets the mouse button that initiated the drag.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo.SourceCollection">
            <summary>
            Gets the collection that the source ItemsControl is bound to.
            </summary>
            
            <remarks>
            If the control that initated the drag is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo.SourceIndex">
            <summary>
            Gets the position from where the item was dragged.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo.SourceItem">
            <summary>
            Gets the object that a dragged item is bound to.
            </summary>
            
            <remarks>
            If the control that initated the drag is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo.SourceItems">
            <summary>
            Gets a collection of objects that the selected items in an ItemsControl are bound to.
            </summary>
            
            <remarks>
            If the control that initated the drag is unbound or not an ItemsControl, this will be empty.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo.VisualSource">
            <summary>
            Gets the control that initiated the drag.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo.VisualSourceItem">
            <summary>
            Gets the item in an ItemsControl that started the drag.
            </summary>
            
            <remarks>
            If the control that initiated the drag is an ItemsControl, this property will hold the item
            container of the clicked item. For example, if <see cref="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo.VisualSource"/> is a ListBox this
            will hold a ListBoxItem.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.Data">
            <summary>
            Gets or sets the drag data.
            </summary>
            
            <remarks>
            This must be set by a drag handler in order for a drag to start.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.DragStartPosition">
            <summary>
            Gets the position of the click that initiated the drag, relative to <see cref="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.VisualSource"/>.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.PositionInDraggedItem">
            <summary>
            Gets the point where the cursor was relative to the item being dragged when the drag was started.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.AllowedEffects">
            <summary>
            Gets or sets the allowed effects for the drag.
            </summary>
            
            <remarks>
            This must be set to a value other than <see cref="F:System.Windows.DragDropEffects.None"/> by a drag handler in order 
            for a drag to start.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.MouseButton">
            <summary>
            Gets the mouse button that initiated the drag.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.SourceCollection">
            <summary>
            Gets the collection that the source ItemsControl is bound to.
            </summary>
            
            <remarks>
            If the control that initated the drag is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.SourceIndex">
            <summary>
            Gets the position from where the item was dragged.
            </summary>
            <value>The index of the source.</value>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.SourceItem">
            <summary>
            Gets the object that a dragged item is bound to.
            </summary>
            
            <remarks>
            If the control that initated the drag is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.SourceItems">
            <summary>
            Gets a collection of objects that the selected items in an ItemsControl are bound to.
            </summary>
            
            <remarks>
            If the control that initated the drag is unbound or not an ItemsControl, this will be empty.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.VisualSource">
            <summary>
            Gets the control that initiated the drag.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.VisualSourceItem">
            <summary>
            Gets the item in an ItemsControl that started the drag.
            </summary>
            
            <remarks>
            If the control that initiated the drag is an ItemsControl, this property will hold the item
            container of the clicked item. For example, if <see cref="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.VisualSource"/> is a ListBox this
            will hold a ListBoxItem.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.VisualSourceFlowDirection">
            <summary>
            Gets the FlowDirection of the current drag source.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DragInfo.DataObject">
            <summary>
            Gets the <see cref="T:System.Windows.IDataObject"/> which is used by the drag and drop operation. Set it to
            a custom instance if custom drag and drop behavior is needed.
            </summary>
        </member>
        <member name="T:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo">
            <summary>
            Holds information about a the target of a drag drop operation.
            </summary>
            
            <remarks>
            The <see cref="T:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo"/> class holds all of the framework's information about the current 
            target of a drag. It is used by <see cref="M:SquaredInfinity.Foundation.Presentation.DragDrop.IDropTarget.DragOver(SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo)"/> method to determine whether 
            the current drop target is valid, and by <see cref="M:SquaredInfinity.Foundation.Presentation.DragDrop.IDropTarget.Drop(SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo)"/> to perform the drop.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.Data">
            <summary>
            Gets the drag data.
            </summary>
            
            <remarks>
            If the drag came from within the framework, this will hold:
            
            - The dragged data if a single item was dragged.
            - A typed IEnumerable if multiple items were dragged.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.DragInfo">
            <summary>
            Gets a <see cref="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.DragInfo"/> object holding information about the source of the drag, 
            if the drag came from within the framework.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.DropPosition">
            <summary>
            Gets the mouse position relative to the VisualTarget
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.DropTargetAdorner">
            <summary>
            Gets or sets the class of drop target to display.
            </summary>
            
            <remarks>
            The standard drop target adorner classes are held in the <see cref="T:SquaredInfinity.Foundation.Presentation.DragDrop.KnownDropTargetAdorners"/>
            class.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.AllowedEffects">
            <summary>
            Gets or sets the allowed effects for the drop.
            </summary>
            
            <remarks>
            This must be set to a value other than <see cref="F:System.Windows.DragDropEffects.None"/> by a drop handler in order 
            for a drop to be possible.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.InsertIndex">
            <summary>
            Gets the current insert position within <see cref="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.TargetCollection"/>.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.TargetCollection">
            <summary>
            Gets the collection that the target ItemsControl is bound to.
            </summary>
            
            <remarks>
            If the current drop target is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.TargetItem">
            <summary>
            Gets the object that the current drop target is bound to.
            </summary>
            
            <remarks>
            If the current drop target is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.TargetGroup">
            <summary>
            Gets the current group target.
            </summary>
            
            <remarks>
            If the drag is currently over an ItemsControl with groups, describes the group that
            the drag is currently over.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.VisualTarget">
            <summary>
            Gets the control that is the current drop target.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.VisualTargetItem">
            <summary>
            Gets the item in an ItemsControl that is the current drop target.
            </summary>
            
            <remarks>
            If the current drop target is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.VisualTargetOrientation">
            <summary>
            Gets the orientation of the current drop target.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.VisualTargetFlowDirection">
            <summary>
            Gets the FlowDirection of the current drop target.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.DestinationText">
            <summary>
            Gets and sets the text displayed in the DropDropEffects adorner.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.InsertPosition">
            <summary>
            Gets the relative position the item will be inserted to compared to the TargetItem
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.KeyStates">
            <summary>
            Gets a flag enumeration indicating the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.RawInsertIndex">
            <summary>
            Insert index in actual target collection (e.g. collection under collection view)
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.IDropInfo.RawTargetCollection">
            <summary>
            Actual target collection (e.g. collection under collection view)
            </summary>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.#ctor(System.Object,System.Windows.DragEventArgs,SquaredInfinity.Foundation.Presentation.DragDrop.IDragInfo)">
            <summary>
            Initializes a new instance of the DropInfo class.
            </summary>
            
            <param name="sender">
            The sender of the drag event.
            </param>
            
            <param name="e">
            The drag event.
            </param>
            
            <param name="dragInfo">
            Information about the source of the drag, if the drag came from within the framework.
            </param>
        </member>
        <member name="F:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo._effects">
            <summary>
            Gets or sets the allowed effects for the drop.
            </summary>
            
            <remarks>
            This must be set to a value other than <see cref="F:System.Windows.DragDropEffects.None"/> by a drop handler in order 
            for a drop to be possible.
            </remarks>
                  
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.Data">
            <summary>
            Gets the drag data.
            </summary>
            
            <remarks>
            If the drag came from within the framework, this will hold:
            
            - The dragged data if a single item was dragged.
            - A typed IEnumerable if multiple items were dragged.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.DragInfo">
            <summary>
            Gets a <see cref="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.DragInfo"/> object holding information about the source of the drag, 
            if the drag came from within the framework.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.DropPosition">
            <summary>
            Gets the mouse position relative to the VisualTarget
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.DropTargetAdorner">
            <summary>
            Gets or sets the class of drop target to display.
            </summary>
            
            <remarks>
            The standard drop target adorner classes are held in the <see cref="T:SquaredInfinity.Foundation.Presentation.DragDrop.KnownDropTargetAdorners"/>
            class.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.InsertIndex">
            <summary>
            Gets the current insert position within <see cref="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.TargetCollection"/>.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.TargetCollection">
            <summary>
            Gets the collection that the target ItemsControl is bound to.
            </summary>
            
            <remarks>
            If the current drop target is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.TargetItem">
            <summary>
            Gets the object that the current drop target is bound to.
            </summary>
            
            <remarks>
            If the current drop target is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.TargetGroup">
            <summary>
            Gets the current group target.
            </summary>
            
            <remarks>
            If the drag is currently over an ItemsControl with groups, describes the group that
            the drag is currently over.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.VisualTarget">
            <summary>
            Gets the control that is the current drop target.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.VisualTargetItem">
            <summary>
            Gets the item in an ItemsControl that is the current drop target.
            </summary>
            
            <remarks>
            If the current drop target is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.VisualTargetOrientation">
            <summary>
            Gets the orientation of the current drop target.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.VisualTargetFlowDirection">
            <summary>
            Gets the orientation of the current drop target.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.DestinationText">
            <summary>
            Gets and sets the text displayed in the DropDropEffects adorner.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.InsertPosition">
            <summary>
            Gets the relative position the item will be inserted to compared to the TargetItem
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.KeyStates">
            <summary>
            Gets a flag enumeration indicating the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.RawInsertIndex">
            <summary>
            Insert index in actual target collection (e.g. collection under collection view)
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.DragDrop.DropInfo.RawTargetCollection">
            <summary>
            Actual target collection (e.g. collection under collection view)
            </summary>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.DragDrop.Utilities.HitTestUtilities.IsNotPartOfSender(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            thx to @osicka from issue #84
            
            e.g. original source is part of a popup (e.g. ComboBox drop down), the hit test needs to be done on the original source.
            Because the popup is not attached to the visual tree of the sender.
            This function test this by looping back from the original source to the sender and if it didn't end up at the sender stopped the drag.
            </summary>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.DragDrop.Utilities.ItemsControlExtensions.GetRawUnderlyingCollection(System.Windows.Controls.ItemsControl)">
            <summary>
            Returns *raw underlying collection* behind specified Items Control.
            If Items Control is bound to a Collection View, it will return the collection used by Collection View
            </summary>
            <param name="itemsControl"></param>
            <returns></returns>
        </member>
        <member name="M:SquaredInfinity.Foundation.Extensions.BitmapSourceExtensions.AddMemoryPressure(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Reports the memory used by <paramref name="bitmap"/> to the GC.
            </summary>
            <param name="bitmap">The bitmap.</param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Extensions.ColorExtensions.ChangeLighthness(System.Windows.Media.Color,System.Double)">
            <summary>
            Returns new color based on existing color with modified lightness component.
            </summary>
            <param name="color"></param>
            <param name="lightnessMultiplier">0.5 to reduce lightness by 50%, 1.5 to increase lightness by 50%</param>
            <returns></returns>
        </member>
        <member name="M:SquaredInfinity.Foundation.Extensions.ImageSourceExtensions.ToBitmap(System.Windows.Media.ImageSource)">
            <summary>
            Converts System.Windows.Media.ImageSource to System.Drawing.Bitmap.
            </summary>
            <param name="imageSource"></param>
            <returns></returns>
        </member>
        <member name="M:SquaredInfinity.Foundation.Extensions.DependencyObjectExtensions.FindNearestVisual(System.Windows.DependencyObject)">
            <summary>
            If specified Dependency Object is not a Visual or Visual3D, then try to walk up logical tree until you find a Visual
            </summary>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="M:SquaredInfinity.Foundation.Extensions.DependencyObjectExtensions.FindVisualRoot(System.Windows.DependencyObject)">
            <summary>
            Find top most parent visual for this element.
            </summary>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="M:SquaredInfinity.Foundation.Extensions.FrameworkElementExtensions.ClearBindingOrReplaceWithDummyValue(System.Windows.FrameworkElement,System.Windows.DependencyProperty)">
            <summary>
            BindingOperation.ClearBinding alternative which handles Data Template scenarios
            see details: http://social.msdn.microsoft.com/Forums/vstudio/en-US/e45c7a9d-840d-4508-8c81-ef40f1c74c10/bindingoperationsclearbinding-reverting-to-data-template-binding?forum=wpf
            </summary>
            <param name="depObj"></param>
            <param name="depProp"></param>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.IUIService.IsDesignTime">
            <summary>
            Gets a value indicating whether this application is in design time.
            </summary>
            <value>
            	<c>true</c> if this lication is in design mode, <c>false</c> otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.IUIService.IsUIThread">
            <summary>
            Runs true if current thread is a UI thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:SquaredInfinity.Foundation.Presentation.MarkupExtensions.CommandMethodBinding.InvokeMethodCommand">
            <summary>
            Implementation of ICommand which calls method with [MethodName] when executing.
            Calls Can[MethodName] to check enabled state.
            If [MethodName] owner implements INotifyPropertyChanged then changes to property called Can[MethodName] will be monitored
            and when changed CanExecute state will be reevaluated.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.ObjectExtensibility.Extensions.SingleSelectionExtension.SelectedItem">
            <summary>
            Item of the list that has been selected.
            </summary>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.Resources.IXamlResourcesProviderMetadata.ImportOrder">
            <summary>
            Default: int.MaxValue => will be loaded last, after any other resources with custom Import Order
            </summary>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Resources.ResourcesManager.LoadCompiledResourceDictionary(System.Uri)">
            <summary>
            Loads a compiled (BAML) resource dictionary.
            </summary>
            <param name="resourceDictionaryUri">The resource dictionary URI  in format: 'applicationName;/component/pathToResource'.</param>
            <returns></returns>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Resources.ResourcesManager.LoadAnMergeCompiledResourceDictionary(System.Uri)">
            <summary>
            Loads a compiled (BAML) resource dictionary and merges it with current Application dictionaries
            </summary>
            <param name="resourceDictionaryUri"></param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Resources.ResourcesManager.LoadResourceDictionary(System.String)">
            <summary>
            Loads the resource dictionary from resource.
            Resource must be stored as a text (i.e. NOT be compiled to BAML)
            </summary>
            <param name="resourceDictionaryUri">The resource dictionary URI  in format: 'applicationName;/component/pathToResource'.</param>
            <returns></returns>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Resources.ResourcesManager.LoadAndMergeResourceDictionary(System.String)">
            <summary>
            Loads the and merge resource dictionary.
            </summary>
            <param name="resourceDictionaryUri">The resource dictionary URI in format: 'applicationName;/component/pathToResource'.</param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Resources.ResourcesManager.LoadAndMergeResourceDictionaryFromThisAssembly(System.String)">
            <summary>
            Loads the and merge resource dictionary located in this assembly.
            </summary>
            <param name="resourceDictionaryRelativeUri">The resource dictionary relative URI in format: 'Temes/Generic.xaml'.</param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Resources.ResourcesManager.LoadResource``1(System.String)">
            <summary>
            Loads the resource.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resourceUri">The resource URI.</param>
            <returns></returns>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Resources.ResourcesManager.LoadResource``1(System.String,System.String)">
            <summary>
            Loads the resource from ResourceDictionary specified by uri.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resourceDictionaryUri">The resource dictionary URI in format: 'applicationName;/component/pathToResource'.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Resources.ResourcesManager.RegisterPackUriScheme">
            <summary>
            registeres pack uri scheme - use this when main application is a console app or unit test runner and not real wpf app
            </summary>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Resources.ResourcesManager.LoadResourceFromThisAssembly``1(System.String,System.String)">
            <summary>
            Loads the resource from ResourceDictionary specified by uri.
            The ResourceDictionary must have Build Action set to 'Resource' (do not copy).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resourceDictionaryRelativeUri">The resource dictionary relative URI in format: 'Resource/MyDictionary.xaml'.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Resources.ResourcesManager.GetAbsoluteAppResourceUri(System.String)">
            <summary>
            Gets the absolute resource url for resource in this application.
            </summary>
            <param name="resourceRelativePath"></param>
            <returns></returns>
            <example>
            Resources.GetAbsoluteAppResourceUri(@"UI/Resource/1.png");
            returns: pack://application:,,,/applicationName;component/UI/Resource/1.png
            </example>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.Resources.ResourcesManager.GetAbsoluteResourceUri(System.String,System.String)">
            <summary>
            Gets the absolute resource uri
            </summary>
            <param name="resourceRelativePath"></param>
            <returns></returns>
            <example>
            Resources.GetAbsoluteAppResourceUri("applicationName", @"UI/Resource/1.png");
            returns: pack://application:,,,/applicationName;component/UI/Resource/1.png
            </example>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.UIService.ShowToolWindow(SquaredInfinity.Foundation.Presentation.Views.View,System.Func{SquaredInfinity.Foundation.Presentation.Windows.ViewHostWindow})">
            <summary>
            Displays a tool window to the user.
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.UIService.ShowDialog(SquaredInfinity.Foundation.Presentation.Views.View)">
            <summary>
            Displays a dialog window to the user using default DialogScope and DialogMode.
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.UIService.ShowDialog(SquaredInfinity.Foundation.Presentation.Views.View,SquaredInfinity.Foundation.Presentation.DialogScope,SquaredInfinity.Foundation.Presentation.DialogMode,System.Boolean,System.Func{SquaredInfinity.Foundation.Presentation.Windows.ViewHostWindow})">
            <summary>
            Displays a dialog window to the user.
            </summary>
            <param name="viewModel"></param>
            <param name="dialogScope"></param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.UIService.ShowAlert(SquaredInfinity.Foundation.Presentation.Views.View)">
            <summary>
            Shows an alert window using default DialogScope and DialogMode.
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.UIService.GetDefaultAlertViewModel">
            <summary>
            Gets the default view model for Alerts.
            Caller can replace the default View with a custom view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.UIService.GetDefaultAlertViewModel(System.String)">
            <summary>
            Gets the default view model for Alerts.
            Caller can replace the default View with a custom view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.UIService.GetDefaultAlertViewModel(System.String,System.String)">
            <summary>
            Gets the default view model for Alerts.
            Caller can replace the default View with a custom view.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SquaredInfinity.Foundation.Presentation.ViewModels.AfterViewModelEventRaisedArgs">
            <summary>
            Event Args for AfterViewModelEventRaised event
            </summary>
        </member>
        <member name="T:SquaredInfinity.Foundation.Presentation.ViewModels.ViewModel">
            <summary>
            Base class for all viewmodels
            </summary>
        </member>
        <member name="M:SquaredInfinity.Foundation.Presentation.ViewModels.ViewModel.RaiseEvent(System.String,System.Object,SquaredInfinity.Foundation.Presentation.ViewModels.ViewModelEventRoutingStrategy)">
            <summary>
            Call this method to raise a View Model Event.
            </summary>
            <param name="eventName"></param>
            <param name="routingStrategy"></param>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.ViewModels.ViewModel.State">
            <summary>
            Gets or sets the state of a ViewModel
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:SquaredInfinity.Foundation.Presentation.Views.View.ViewModelPlaceholder">
            <summary>
            View Model Placeholder is used in late-viewmodel-binding cases.
            For example, one view (A) can contain another view (B) inside.
            B view model may be bound to A view model (in xaml control template).
            This binding will be ready by the time OnApplyTemplate() is called, 
            but changing ViewModel property before that (e.g. in constructor) will effecitvely break this binding.
            For that reason, OnApplyTemplate() will check if ViewModel property has binding set, 
            if it has, ViewModelPlaceholder will be discarded,
            otherwise ViewModel DP will be set to Placeholder value.
            
            </summary>
        </member>
        <member name="F:SquaredInfinity.Foundation.Presentation.XamlResources.ImportOrder">
            <summary>
            Order is set to int.MinValue so that this resources are imported first
            </summary>
        </member>
    </members>
</doc>
